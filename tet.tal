( untitled block game - a wip by nf@wh3rd.net )

( macros )

%MOD   { DIVk MUL SUB }
%debug { #f4 .System/debug DEO }
%halt  { #81 .System/halt DEO }

%well_screen_x { #0058 }
%well_screen_y { #0040 }
%next_screen_x { #00b8 }
%next_screen_y { #00b8 }
%score_screen_x { #00b8 }
%score_screen_y { #0088 }

%well_line_start { #03 }
%well_line_end { #0c }
%well_first_line { #0040 }
%well_last_line { #0170 }
%well_first_block_minus_1 { #0042 }

( devices )

|00 @System     [ &vector $2 &wst      $1 &rst    $1 &pad   $4 &r      $2 &g      $2 &b    $2 &debug  $1 &halt $1 ]
|10 @Console    [ &vector $2 &read     $1 &pad    $5 &write $1 &error  $1 ]
|20 @Screen     [ &vector $2 &width    $2 &height $2 &auto  $1 &pad    $1 &x      $2 &y    $2 &addr   $2 &pixel $1 &sprite $1 ]
|30 @Audio0     [ &vector $2 &position $2 &output $1 &pad   $3 &adsr   $2 &length $2 &addr $2 &volume $1 &pitch $1 ]
|80 @Controller [ &vector $2 &button   $1 &key    $1 ]
|c0 @DateTime   [ &year   $2 &month    $1 &day    $1 &hour  $1 &minute $1 &second $1 &dotw $1 &doty   $2 &isdst $1 ]

( variables )

|0000

|0010

( the piece controlled by the player )
@cur  &type $1 &rot $1 &x $1 &y $1
( a virtual piece used to cur piece movement )
@test &type $1 &rot $1 &x $1 &y $1
( the next piece to enter the field )
@next &type $1 &rot $1 &x $1 &y $1

@score
	&lines $2

( program )

|0100 ( -> )

	( theme ) 
	#0ea5 .System/r DEO2 
	#0cf2 .System/g DEO2
	#09d9 .System/b DEO2

	( vectors )
	;on-frame .Screen/vector DEO2
	;button/vector .Controller/vector DEO2

	( resize )
	#0100 .Screen/width DEO2
	#0100 .Screen/height DEO2

	draw-bg
	init-well
	new-cur-piece
	set-cur-piece
	set-next-piece
BRK

@on-frame ( -> )
	[ LIT &is-dead $1 ]
		?&draw

	( compact if we have a reason to )
	[ LIT &is-compact $1 ]
		?&p-compact
	compact-well
	( remember the result, avoid duplicate work )
	DUP ,&is-compact STR 
		?&p-compact
	( compact mutated, so re-set the piece which was wiped )
	set-cur-piece
	&p-compact

	( copy cur to test )
	copy-cur-to-test

	( inputs )
	#01 button/pressed ?&p-a
		.test/rot LDZ #03 ADD #04 MOD .test/rot STZ
		&p-a
	#02 button/pressed ?&p-b
		.test/rot LDZ INC #04 MOD .test/rot STZ
		&p-b
	#40 button/pressed ?&p-lt
		.test/x LDZ #01 SUB .test/x STZ
		&p-lt
	#80 button/pressed ?&p-rt
		.test/x LDZ INC .test/x STZ
		&p-rt 

	( test x/rot change )
	.test/rot LDZ .cur/rot LDZ EQU
	.test/x LDZ .cur/x LDZ EQU
		AND ?&x-done
	try-test-piece POP
	&x-done

	#00 ,&inc-y STR

	( gravity )
	[ LIT &tick $1 ] INC
	#20 MOD
	DUP ,&tick STR
		?&no-tick
	#01 ,&inc-y STR
	&no-tick

	( down button )
	#20 button/held
		?&no-down
	#01 ,&inc-y STR
	&no-down

	( test y change )
	[ LIT &inc-y $1 ]
		#00 EQU ?&draw
	.test/y LDZ INC .test/y STZ
	try-test-piece
		#00 EQU ?&draw
	( freeze the current piece, create a new piece )
	freeze-cur-piece
	new-cur-piece
	( check if the new piece fits in the well, if not we died )
	copy-cur-to-test
	try-test-piece
		?&dead
	set-cur-piece
	set-next-piece
	( there are new frozen blocks, compact next frame )
	#00 ;&is-compact STA
	!&draw

	&dead
	#01 ;&is-dead STA

	&draw
	draw-well
	draw-next
	draw-score
BRK

@button
	[ LIT &state $1 ]
&vector ( -> )
	.Controller/button DEI DUP
	,&state STR
	[ LIT &debounce $1 ] AND ,&debounce STR
BRK
&held ( code -- not-held )
	DUP ,&state LDR AND EOR
JMP2r
&pressed ( code -- not-pressed )
	DUP ,&state LDR AND
		?&pressed-debounce
	&not-pressed
	POP #01
JMP2r
&pressed-debounce
	DUP
	,&debounce LDR AND
		?&not-pressed
	,&debounce LDR ORA ,&debounce STR
	#00
JMP2r

@init-well ( -- )
	;well &loop
		DUP2 #0ff0 AND2 well_last_line GTH2
			?&block
		DUP #0f AND well_line_start LTH
			?&block
		DUP #0f AND well_line_end GTH
			?&block
		&space #00
			!&store
		&block #02
		&store ROT ROT STAk ROT POP
		INC2 DUP2 ;well/end LTH2
			?&loop
	POP2
JMP2r

@compact-well ( -- noop )
	#00 ,&line-sum STR
	well_first_block_minus_1 ;well ADD2
	&loop
		INC2
		( check eol )
		DUP #0f AND well_line_end GTH
			?&eol
		( check bottom )
		DUP2 #0ff0 AND2 well_last_line GTH2
			?&done
		( sum elements )
		LDAk [ LIT &line-sum $1 ] ADD ,&line-sum STR
			!&loop
		&eol
			,&line-sum LDR #14 EQU
				?&hl-line
			,&line-sum LDR #28 EQU
				?&rem-line
			#00 ,&line-sum STR
			#0005 ADD2
				!&loop
			&hl-line 
				DUP2 #000a SUB2
				&hl-block
					DUP2 #04 ROT ROT STA
					INC2 GTH2k
						?&hl-block
				POP2 POP2 #00
				JMP2r
			&rem-line
				remove-well-line
				.score/lines LDZ2 INC2 .score/lines STZ2
				#00
				JMP2r
	&done POP2 #01
JMP2r

@remove-well-line ( well-addr-on-line -- )
	&loop
		#0001 SUB2
		( read block from line above )
		DUP2k #0010 SUB2 LDA
		( exclude current piece )
		#fe AND 
		( store block in current line )
		ROT ROT STA
		( see if we're done )
		DUP2 #0fff AND2 #0010 GTH2
			?&loop
	POP2
JMP2r

@copy-cur-to-test
	.cur/type LDZ .test/type STZ
	.cur/rot LDZ .test/rot STZ
	.cur/y LDZ .test/y STZ
	.cur/x LDZ .test/x STZ
JMP2r

@new-cur-piece ( -- )
	#06 .cur/x STZ
	#00 .cur/y STZ
	#00 .cur/rot STZ
	.next/type LDZ .cur/type STZ

	#00 .next/x STZ
	#01 .next/y STZ
	.next/type LDZ INC #07 MOD .next/type STZ
JMP2r

@set-cur-piece ( -- )
	.cur ;&each each-piece-block
JMP2r
	&each ( well-offset -- )
		;well ADD2 #01 ROT ROT STA
	JMP2r

@unset-cur-piece ( -- )
	.cur ;&each each-piece-block
JMP2r
	&each ( well-offset -- )
		;well ADD2 LDAk #fe AND ROT ROT STA
	JMP2r

@freeze-cur-piece ( -- )
	.cur ;&each each-piece-block
JMP2r
	&each ( well-offset -- )
		;well ADD2 #02 ROT ROT STA
	JMP2r

( tries to move cur to test, reports whether it failed )
@try-test-piece ( -- blocked )
	#00 ,&blocked STR
	.test ;&each each-piece-block
	[ LIT &blocked $1 ]
		?&is-blocked
	unset-cur-piece
	.test/rot LDZ .cur/rot STZ
	.test/x   LDZ .cur/x   STZ
	.test/y   LDZ .cur/y   STZ
	set-cur-piece
	#00 
JMP2r
	&is-blocked
	.cur/rot LDZ .test/rot STZ
	.cur/x   LDZ .test/x   STZ
	.cur/y   LDZ .test/y   STZ
	#01
JMP2r
	&each ( well-offset -- )
		;well ADD2 LDA #02 AND
		,&blocked LDR ORA ,&blocked STR
	JMP2r

@set-next-piece ( -- )
	;well-next &clear
		DUP2 #00 ROT ROT STA
	INC2 DUP2 ;well-next/end LTH2
		?&clear
	POP2
	.next ;&each each-piece-block
JMP2r
	&each ( well-offset -- )
		;well-next ADD2 #01 ROT ROT STA
	JMP2r

@piece-bits ( piece -- piece-bits* )
	LDZk #30 SFT ( type ) 
	SWP INC LDZ #10 SFT ( rot )
	ADD #00 SWP
	;pieces ADD2 LDA2 ( piece16 )
JMP2r

@piece-offset ( piece -- offset* )
	INC INC INCk LDZ #00 SWP #0010 MUL2 ( y* )
	ROT LDZ #00 SWP ( x* )
	ADD2
JMP2r

@each-piece-block ( piece each-func* -- )
	,&each-func STR2
	DUP piece-bits ,&pbits STR2
	    piece-offset ,&poffs STR2
	( go backward from bottom-right, as we
	  consume pbits least-to-most significant )
	#33 ,&woffs STR
	#00 ,&col STR ( 0-3 )

	&loop
	( test whether a piece block is at woffs )
	[ LIT2 &pbits $2 ] NIP #01 AND #01 EOR ?&nope
		[ LIT2 &poffs $2 ] #00 ,&woffs LDR ADD2
		[ LIT2 &each-func $2 ] 
		JSR2
	&nope

	[ LIT &woffs $1 ]
	[ LIT &col $1 ] INC #04 MOD DUP ,&col STR
		?&same-row
	( next row )
	#0c SUB 
	&same-row
	#01 SUB
	,&woffs STR

	( shift pbits right )
	,&pbits LDR2 #01 SFT2 DUP2 ,&pbits STR2
	( continue if there are more blocks )
	#0000 GTH2
		?&loop
JMP2r

( draw game state )

@draw-well ( -- )
	well_screen_x .Screen/x DEO2
	well_screen_y .Screen/y DEO2
	#01 .Screen/auto DEO
	well_first_block_minus_1 ;well ADD2 &loop
		INC2
		( check eol )
		DUP #0f AND well_line_end GTH
			?&eol
		( check bottom )
		DUP2 #0ff0 AND2 well_last_line GTH2
			?&done
		( draw blank or block? )
		DUP2 LDA DUP
			?&draw-block
		&draw-blank
			;blank-chr .Screen/addr DEO2
			#40 ORA .Screen/sprite DEO
				!&loop
		&draw-block
			;block-icn .Screen/addr DEO2
			#c0 ORA .Screen/sprite DEO
				!&loop
		&eol
			well_screen_x .Screen/x DEO2
			.Screen/y DEI2 #0008 ADD2 .Screen/y DEO2
			#0005 ADD2
			!&loop
	&done POP2
JMP2r

@draw-next ( -- )
	next_screen_x #0008 ADD2 .Screen/x DEO2
	next_screen_y #0004 ADD2 .Screen/y DEO2
	#01 .Screen/auto DEO
	;well-next #0001 SUB2 &loop
		INC2
		( check eol )
		DUP #0f AND #04 GTH
			?&eol
		( check bottom )
		DUP #f0 AND #40 GTH
			?&done
		( draw blank or block? )
		DUP2 LDA DUP
			?&draw-block
		&draw-blank
			;blank-chr .Screen/addr DEO2
			#40 ORA .Screen/sprite DEO
				!&loop
		&draw-block
			;block-icn .Screen/addr DEO2
			#c0 ORA .Screen/sprite DEO
				!&loop
		&eol
			next_screen_x #0008 ADD2 .Screen/x DEO2
			.Screen/y DEI2 #0008 ADD2 .Screen/y DEO2
			#000a ADD2
			!&loop
	&done POP2
JMP2r

@draw-score ( -- )
	score_screen_x #0004 ADD2 
	score_screen_y #0010 ADD2
	.score/lines LDZ2
	#41
	draw-num
JMP2r

( backgrounds )

@draw-bg ( -- )
	draw-bg-textures
	draw-bg-boxes

	next_screen_x #0001 ADD2
	next_screen_y #0002 ADD2 
	;strings/next #02 draw-str

	score_screen_x #0001 ADD2
	score_screen_y #0002 ADD2 
	;strings/lines #02 draw-str
JMP2r

@draw-bg-boxes ( -- )
	( main field )
	well_screen_x #0008 SUB2
	well_screen_y #0008 SUB2
	#0058 #00a8 #0a draw-box 

	( next piece )
	next_screen_x #0008 SUB2
	next_screen_y #0008 SUB2
	#0038 #0030 #05 draw-box

	( score )
	score_screen_x #0008 SUB2
	score_screen_y #0008 SUB2
	#0038 #0028 #0f draw-box
JMP2r

@draw-bg-textures ( -- )
	;bg/stripes .Screen/addr DEO2
	#f2 .Screen/auto DEO
	#0000 .Screen/x DEO2
	&bg-x
		.Screen/x DEI2 #0100 GTH2
			?&bg-done
		#0000 .Screen/y DEO2
		&bg-y
			#03 .Screen/sprite DEO
			.Screen/y DEI2 #0100 LTH2 
				?&bg-y
		.Screen/x DEI2 #0080 ADD2 .Screen/x DEO2
		!&bg-x
	&bg-done

	;bg/dots .Screen/addr DEO2
	#01 .Screen/auto DEO
	well_screen_x .Screen/x DEO2
	well_screen_y .Screen/y DEO2
	#00 &well-y
		INC 
		DUP #07 MOD #00 EQU #70 SFT 
		OVR #09 MOD #42 SFT 
		ORA #03 ORA .Screen/sprite DEO
		DUP #c8 GTH
			?&well-done
		DUP #0a MOD
			?&well-y
		well_screen_x .Screen/x DEO2
		.Screen/y DEI2 #0008 ADD2 .Screen/y DEO2
			!&well-y
	&well-done POP

	next_screen_x .Screen/x DEO2
	next_screen_y .Screen/y DEO2
	#00 &next-y
		INC 
		DUP #05 MOD #41 SFT
		#81 ORA .Screen/sprite DEO
		DUP #1d GTH
			?&next-done
		DUP #06 MOD
			?&next-y
		next_screen_x .Screen/x DEO2
		.Screen/y DEI2 #0008 ADD2 .Screen/y DEO2
			!&next-y
	&next-done POP

	score_screen_x .Screen/x DEO2
	score_screen_y .Screen/y DEO2
	#00 &score-y
		INC 
		DUP #04 MOD #71 SFT 
		OVR #07 MOD #41 SFT ORA
		#83 ORA .Screen/sprite DEO
		DUP #17 GTH
			?&score-done
		DUP #06 MOD
			?&score-y
		score_screen_x .Screen/x DEO2
		.Screen/y DEI2 #0008 ADD2 .Screen/y DEO2
			!&score-y
	&score-done POP
JMP2r

@draw-box ( x y w h col -- )
	;&col STA ;&h STA2 ;&w STA2 ;&y STA2 ;&x STA2

	( corners )

	;border-chr/corner .Screen/addr DEO2
	#00 .Screen/auto DEO
	( tl )    #0000 ;&set-x JSR2 
	          #0000 ;&set-y JSR2 #80 ;&put JSR2
	( tr ) ;&w LDA2 ;&set-x JSR2 #90 ;&put JSR2
	( br ) ;&h LDA2 ;&set-y JSR2 #b0 ;&put JSR2
	( bl )    #0000 ;&set-x JSR2 #a0 ;&put JSR2

	( edges )

	;border-chr/edge-ver .Screen/addr DEO2
	#02 .Screen/auto DEO
	( left )     #0000 ;&set-x JSR2 #0008 ;&set-y JSR2 #80 ;&puth JSR2
	( right ) ;&w LDA2 ;&set-x JSR2 #0008 ;&set-y JSR2 #90 ;&puth JSR2

	;border-chr/edge-hor .Screen/addr DEO2
	#01 .Screen/auto DEO
	( top )    #0008 ;&set-x JSR2    #0000 ;&set-y JSR2 #80 ;&putw JSR2
	( bottom ) #0008 ;&set-x JSR2 ;&h LDA2 ;&set-y JSR2 #a0 ;&putw JSR2
JMP2r
	&set-x ( offset* -- )
		[ LIT2 &x $2 ] ADD2 .Screen/x DEO2
	JMP2r
	&set-y ( offset* -- )
		[ LIT2 &y $2 ] ADD2 .Screen/y DEO2
	JMP2r
	&put ( flags -- )
		[ LIT &col $1 ] ORA .Screen/sprite DEO
	JMP2r
	&putw ( flags -- )
		[ LIT2 &w $2 ] NIP #08 SUB
		&wloop OVR ,&put JSR #08 SUB DUP ?&wloop
		POP2
	JMP2r
	&puth ( flags -- )
		[ LIT2 &h $2 ] NIP #08 SUB
		&hloop OVR ,&put JSR #08 SUB DUP ?&hloop
		POP2
	JMP2r

( text )

@draw-str ( x* y* text* color -- )
	#01 .Screen/auto DEO
	STH
	SWP2 .Screen/y DEO2
	SWP2 .Screen/x DEO2
	&loop
		LDAk #20 SUB #00 SWP #30 SFT2 ;font ADD2 .Screen/addr DEO2
		STHkr .Screen/sprite DEO
		INC2 LDAk ?&loop
	POP2
	STHr POP
	#00 .Screen/auto DEO
JMP2r

@draw-num ( *x *y num* color -- )
	#01 .Screen/auto DEO
	STH
	SWP2 .Screen/y DEO2
	SWP2 .Screen/x DEO2
	#2710 DIV2k DUP2 NIP ,&digit JSR MUL2 SUB2
	#03e8 DIV2k DUP2 NIP ,&digit JSR MUL2 SUB2
	#0064 DIV2k DUP2 NIP ,&digit JSR MUL2 SUB2 NIP
	#0a DIVk DUP ,&digit JSR MUL SUB
	,&digit JSR
	STHr POP
	#00 .Screen/auto DEO
JMP2r
	&digit ( chr -- )
		#10 ADD #00 SWP #30 SFT2 ;font ADD2 .Screen/addr DEO2
		OVR2r NIPr STHr .Screen/sprite DEO
	JMP2r

( assets )

@strings
	&lines "LINES $1
	&next "NEXT $1
@pieces
	&i 0f00 4444 0f00 4444
	&s 4620 6c00 4620 6c00
	&z 2640 c600 2640 c600
	&l 4460 0e80 c440 2e00
	&j 6440 e200 44c0 08e0
	&t 4640 0e40 4c40 4e00
	&b 6600 6600 6600 6600

@blank-chr
	ffff ffff ffff ffff
@block-icn
	7e81 8181 8181 817f
	007f 7f7f 7f7f 7f7f

@border-chr
	&corner
	0000 0000 0003 0707
	0000 0000 0304 0808
	&edge-ver
	0707 0707 0707 0707
	0808 0808 0808 0808
	&edge-hor
	0000 0000 00ff ffff
	0000 0000 ff00 0000
@bg
	&stripes
	030c 30c0 030c 30c0
	e38f 3ef8 e38f 3ef8
	&dots
	0000 4000 0000 1000
	0000 4000 0000 0000

( game data )

|4000

@well $200 &end
@well-next $40 &end

@font ( atari8.uf1 )
	0000 0000 0000 0000 6060 6060 6000 6000
	6666 6600 0000 0000 006c fe6c 6cfe 6c00
	183e 603c 067c 1800 0066 6c18 3066 4600
	386c 3870 decc 7600 6060 6000 0000 0000
	0e1c 1818 181c 0e00 7038 1818 1838 7000
	0066 3cff 3c66 0000 0018 187e 1818 0000
	0000 0000 0030 3060 0000 007e 0000 0000
	0000 0000 0018 1800 0206 0c18 3060 4000
	&num
	3c66 6e76 6666 3c00 1838 1818 1818 7e00
	3c66 060c 1830 7e00 7e0c 180c 0666 3c00
	0c1c 3c6c 7e0c 0c00 7e60 7c06 0666 3c00
	3c60 607c 6666 3c00 7e06 0c18 3030 3000
	3c66 663c 6666 3c00 3c66 663e 060c 3800
	0060 6000 6060 0000 0030 3000 3030 6000
	0c18 3060 3018 0c00 0000 7e00 007e 0000
	6030 180c 1830 6000 3c66 060c 1800 1800
	3c66 6e6a 6e60 3e00 183c 6666 7e66 6600
	7c66 667c 6666 7c00 3c66 6060 6066 3c00
	786c 6666 666c 7800 7e60 607c 6060 7e00
	7e60 607c 6060 6000 3e60 606e 6666 3e00
	6666 667e 6666 6600 7830 3030 3030 7800
	0606 0606 0666 3c00 666c 7870 786c 6600
	6060 6060 6060 7e00 c6ee fed6 c6c6 c600
	6676 7e7e 6e66 6600 3c66 6666 6666 3c00
	7c66 667c 6060 6000 3c66 6666 766c 3600
	7c66 667c 6c66 6600 3c66 603c 0666 3c00
	7e18 1818 1818 1800 6666 6666 6666 3e00
	6666 6666 663c 1800 c6c6 c6d6 feee c600
	6666 3c18 3c66 6600 6666 663c 1818 1800
	7e06 0c18 3060 7e00 7860 6060 6060 7800
