( untitled block game - a wip by nf@wh3rd.net )

( macros )

%MOD   { DIVk MUL SUB }
%debug { #f4 .System/debug DEO }
%halt  { #81 .System/halt DEO }

%well_line_start { #03 }
%well_line_end { #0c }
%well_first_line { #0040 }
%well_last_line { #0170 }
%well_first_block_minus_1 { #0042 }

( devices )

|00 @System     [ &vector $2 &wst      $1 &rst    $1 &pad   $4 &r      $2 &g      $2 &b    $2 &debug  $1 &halt $1 ]
|10 @Console    [ &vector $2 &read     $1 &pad    $5 &write $1 &error  $1 ]
|20 @Screen     [ &vector $2 &width    $2 &height $2 &auto  $1 &pad    $1 &x      $2 &y    $2 &addr   $2 &pixel $1 &sprite $1 ]
|30 @Audio0     [ &vector $2 &position $2 &output $1 &pad   $3 &adsr   $2 &length $2 &addr $2 &volume $1 &pitch $1 ]
|80 @Controller [ &vector $2 &button   $1 &key    $1 ]
|c0 @DateTime   [ &year   $2 &month    $1 &day    $1 &hour  $1 &minute $1 &second $1 &dotw $1 &doty   $2 &isdst $1 ]

( variables )

|0000

|0010

( the piece controlled by the player )
@cur   &type $1 &rot $1 &x $1 &y $1
( a virtual piece used to cur piece movement )
@test  &type $1 &rot $1 &x $1 &y $1
( a virtual piece that sits where cur would drop )
@ghost &type $1 &rot $1 &x $1 &y $1
( the next piece to enter the field )
@next  &type $1 &rot $1 &x $1 &y $1

@score
	&level $1
	&lines $2
	&points $2

( program )

|0100 ( -> )
	( theme ) 
	;theme/mono theme/set

	( vectors )
	;on-frame .Screen/vector DEO2
	;button/vector .Controller/vector DEO2

	( resize )
	#0100 .Screen/width DEO2
	#0100 .Screen/height DEO2

	init-well
	new-cur-piece
	set-cur-piece
	set-next-piece
BRK

@on-frame ( -> )
(
	#04 button/pressed ?&p-sel
		;draw-block/offs LDA INC #10 MOD ;draw-block/offs STA
		&p-sel
)
	[ LIT &is-dead $1 ]
		?&draw

	#01 ;&update-cur STA

	( compact if we have a reason to )
	[ LIT &is-compact $1 ]
		?&p-compact
	compact-well
	( remember the result, avoid duplicate work )
	DUP ,&is-compact STR 
		?&p-compact
	( compact mutated, so re-set the piece which was wiped )
	#00 ;&update-cur STA
	&p-compact

	.test .cur copy-piece

	( inputs )
	#01 button/pressed ?&p-a
		.test/rot LDZ #03 ADD #04 MOD .test/rot STZ
		&p-a
	#02 button/pressed ?&p-b
		.test/rot LDZ INC #04 MOD .test/rot STZ
		&p-b
	#40 button/pressed ?&p-lt
		.test/x LDZ #01 SUB .test/x STZ
		&p-lt
	#80 button/pressed ?&p-rt
		.test/x LDZ INC .test/x STZ
		&p-rt 

	( test x/rot change )
	.test/rot LDZ .cur/rot LDZ EQU
	.test/x LDZ .cur/x LDZ EQU
		AND ?&x-done
	.test try-piece
		?&x-done
	( x or rot can change, update cur )
	.ghost clear-piece
	.cur clear-piece
	.cur .test copy-piece
	#00 ;&update-cur STA
	&x-done

	#01 ,&inc-y STR

	( gravity )
	[ LIT &tick $1 ] INC
	#20 MOD
	DUP ,&tick STR
		?&no-tick
	#00 ,&inc-y STR
	&no-tick

	( down button )
	#20 button/held
		?&no-down
	#00 ,&inc-y STR
	&no-down

	( up button )
	#10 button/pressed 
		?&test-y
	update-ghost
	.cur clear-piece
	.cur .ghost copy-piece
	!&freeze

	( test y change )
	&test-y
	[ LIT &inc-y $1 ]
		?&maybe-update-cur
	.test .cur copy-piece
	.test/y LDZ INC .test/y STZ
	.test try-piece
		?&freeze
	( y can change, update cur )
	.cur clear-piece
	.cur .test copy-piece
	#00 ;&update-cur STA
	!&maybe-update-cur
	( freeze the current piece, create a new piece )
	&freeze
	freeze-cur-piece
	new-cur-piece
	#00 ;&update-cur STA
	( check if the new piece fits in the well, if not we died )
	.cur try-piece
		?&dead
	set-next-piece
	( there are new frozen blocks, compact next frame )
	#00 ;&is-compact STA

	&maybe-update-cur
	[ LIT &update-cur $1 ]
		?&draw
	update-ghost
	set-ghost-piece
	set-cur-piece
	!&draw

	&dead
	#01 ;&is-dead STA

	&draw

	draw-bg
	draw-well
	draw-next
	draw-score
BRK

@update-ghost
	.ghost .cur copy-piece
	&loop
	.ghost/y LDZ INC .ghost/y STZ
	.ghost try-piece #00 EQU 
		?&loop
	.ghost/y LDZ #01 SUB .ghost/y STZ
JMP2r

@button
	[ LIT &state $1 ]
&vector ( -> )
	.Controller/button DEI DUP
	,&state STR
	[ LIT &debounce $1 ] AND ,&debounce STR
BRK
&held ( code -- not-held )
	DUP ,&state LDR AND EOR
JMP2r
&pressed ( code -- not-pressed )
	DUP ,&state LDR AND
		?&pressed-debounce
	&not-pressed
	POP #01
JMP2r
&pressed-debounce
	DUP
	,&debounce LDR AND
		?&not-pressed
	,&debounce LDR ORA ,&debounce STR
	#00
JMP2r

@init-well ( -- )
	;well &loop
		DUP2 #0ff0 AND2 well_last_line GTH2
			?&block
		DUP #0f AND well_line_start LTH
			?&block
		DUP #0f AND well_line_end GTH
			?&block
		&space #00
			!&store
		&block #80
		&store ROT ROT STAk ROT POP
		INC2 DUP2 ;well/end LTH2
			?&loop
	POP2
JMP2r

@compact-well ( -- noop )
	#00 ;&lines STA
	#00 ,&line-sum STR
	well_first_block_minus_1 ;well ADD2
	&loop
		INC2
		( check eol )
		DUP #0f AND well_line_end GTH
			?&eol
		( check bottom )
		DUP2 #0ff0 AND2 well_last_line GTH2
			?&done
		( sum elements )
		LDAk #04 SFT [ LIT &line-sum $1 ] ADD ,&line-sum STR
			!&loop
		&eol
			,&line-sum LDR #14 EQU
				?&hl-line
			,&line-sum LDR #28 EQU
				?&rem-line
			!&cont
			&hl-line 
				DUP2 #000a SUB2
				&hl-block
					DUP2 LDAk #8f AND #40 ORA ROT ROT STA
					INC2 GTH2k
						?&hl-block
				,&lines LDR INC ,&lines STR
				POP2
				!&cont
			&rem-line
				remove-well-line
				#00
				JMP2r
			&cont
			#00 ,&line-sum STR
			#0005 ADD2
				!&loop
	&done POP2

	,&lines LDR
		?&inc-score
	#01
JMP2r
	&inc-score
		#00 [ LIT &lines $1 ] .score/lines LDZ2 ADD2 .score/lines STZ2
		#00 ,&lines LDR DUP MUL .score/points LDZ2 ADD2 .score/points STZ2
		#00
	JMP2r

@remove-well-line ( well-addr-on-line -- )
	&loop
		#0001 SUB2
		( read block from line above )
		DUP2k #0010 SUB2 LDA
		( exclude current piece )
		#e7 AND 
		( store block in current line )
		ROT ROT STA
		( see if we're done )
		DUP2 #0fff AND2 #0010 GTH2
			?&loop
	POP2
JMP2r

@copy-piece ( dst src -- )
	SWPk INC SWP INC
	SWPk INC SWP INC
	SWPk INC SWP INC
	LDZ SWP STZ
	LDZ SWP STZ
	LDZ SWP STZ
	LDZ SWP STZ
JMP2r

@new-cur-piece ( -- )
	#06 .cur/x STZ
	#00 .cur/y STZ
	#00 .cur/rot STZ
	.next/type LDZ .cur/type STZ

	#00 .next/x STZ
	#01 .next/y STZ
	.next/type LDZ INC #07 MOD .next/type STZ
JMP2r

@set-piece ( piece mask addr* -- )
	,&addr STR2 OVR LDZ #f8 ORA AND ,&val STR
	;&each each-piece-block
JMP2r
	&each ( well-offset -- )
		[ LIT2 &addr $2 ] ADD2 [ LIT &val $1 ] ROT ROT STA
	JMP2r

@set-cur-piece ( -- )
	.cur #17 ;well set-piece
JMP2r

@clear-piece ( -- )
	#00 ;well set-piece
JMP2r

@freeze-cur-piece ( -- )
	.cur #27 ;well set-piece
JMP2r

@set-ghost-piece ( -- )
	.ghost #08 ;well set-piece
JMP2r

( tries to move cur to test, reports whether it failed )
@try-piece ( piece -- blocked )
	#00 ,&blocked STR
	;&each each-piece-block
	,&blocked LDR
JMP2r
	&each ( well-offset -- )
		;well ADD2 LDA #e0 AND
		[ LIT &blocked $1 ] ORA ,&blocked STR
	JMP2r

@set-next-piece ( -- )
	;well-next &clear
		DUP2 #00 ROT ROT STA
	INC2 DUP2 ;well-next/end LTH2
		?&clear
	POP2
	.next #1f ;well-next set-piece
JMP2r
	&each ( well-offset -- )
		;well-next ADD2 #03 ROT ROT STA
	JMP2r

@piece-bits ( piece -- piece-bits* )
	LDZk #30 SFT ( type ) 
	SWP INC LDZ #10 SFT ( rot )
	ADD #00 SWP
	;pieces ADD2 LDA2 ( piece16 )
JMP2r

@piece-offset ( piece -- offset* )
	INC INC INCk LDZ #00 SWP #0010 MUL2 ( y* )
	ROT LDZ #00 SWP ( x* )
	ADD2
JMP2r

@each-piece-block ( piece each-func* -- )
	,&each-func STR2
	DUP piece-bits ,&pbits STR2
	    piece-offset ,&poffs STR2
	( go backward from bottom-right, as we
	  consume pbits least-to-most significant )
	#33 ,&woffs STR
	#00 ,&col STR ( 0-3 )

	&loop
	( test whether a piece block is at woffs )
	[ LIT2 &pbits $2 ] NIP #01 AND #01 EOR ?&nope
		[ LIT2 &poffs $2 ] #00 ,&woffs LDR ADD2
		[ LIT2 &each-func $2 ] 
		JSR2
	&nope

	[ LIT &woffs $1 ]
	[ LIT &col $1 ] INC #04 MOD DUP ,&col STR
		?&same-row
	( next row )
	#0c SUB 
	&same-row
	#01 SUB
	,&woffs STR

	( shift pbits right )
	,&pbits LDR2 #01 SFT2 DUP2 ,&pbits STR2
	( continue if there are more blocks )
	#0000 GTH2
		?&loop
JMP2r

( draw game state )

@pos
	&well-x 0058
	&well-y 0030
	&well-w 0a
	&well-h 14

	&next-x 00b0
	&next-y 00a8
	&next-w 06
	&next-h 05

	&score-x 0020
	&score-y 0030
	&score-w 06
	&score-h 08

@draw-well ( -- )
	;pos/well-x LDA2 .Screen/x DEO2
	;pos/well-y LDA2 .Screen/y DEO2
	#01 .Screen/auto DEO
	well_first_block_minus_1 ;well ADD2 &loop
		INC2
		( check eol )
		DUP #0f AND well_line_end GTH
			?&eol
		( check bottom )
		DUP2 #0ff0 AND2 well_last_line GTH2
			?&done
		( draw blank or block? )
		DUP2 LDA DUP #08 AND
			?&ghost
		DUP #f0 AND
			?&block
		&blank
			;blank-chr .Screen/addr DEO2
			POP #40 .Screen/sprite DEO
				!&loop
		&block
			draw-block
				!&loop
		&ghost
			;ghost-icn .Screen/addr DEO2
			POP #41 .Screen/sprite DEO
				!&loop
		&eol
			;pos/well-x LDA2 .Screen/x DEO2
			.Screen/y DEI2 #0008 ADD2 .Screen/y DEO2
			#0005 ADD2
			!&loop
	&done POP2
JMP2r

@draw-next ( -- )
	;pos/next-x LDA2 #0008 ADD2 .Screen/x DEO2
	;pos/next-y LDA2 #0006 ADD2 .Screen/y DEO2
	#01 .Screen/auto DEO
	;well-next #0001 SUB2 &loop
		INC2
		( check eol )
		DUP #0f AND #04 GTH
			?&eol
		( check bottom )
		DUP #f0 AND #40 GTH
			?&done
		( draw blank or block? )
		DUP2 LDA DUP
			?&draw-block
		&draw-blank
			;blank-chr .Screen/addr DEO2
			#40 ORA .Screen/sprite DEO
				!&loop
		&draw-block
			draw-block
			!&loop
		&eol
			;pos/next-x LDA2 #0008 ADD2 .Screen/x DEO2
			.Screen/y DEI2 #0008 ADD2 .Screen/y DEO2
			#000a ADD2
			!&loop
	&done POP2
JMP2r

@draw-block
	#07 AND DUP
	#04 MOD #00 SWP #0010 MUL2 ;blocks-icn ADD2 .Screen/addr DEO2
	#03 MOD #03 ADD #80 ORA .Screen/sprite DEO
JMP2r

@draw-score ( -- )
	;pos/score-x LDA2 #0004 ADD2 
	;pos/score-y LDA2 #000e ADD2
	#00 .score/level LDZ
	#41
	draw-num
	;pos/score-x LDA2 #0004 ADD2 
	;pos/score-y LDA2 #0022 ADD2
	.score/lines LDZ2
	#41
	draw-num
	;pos/score-x LDA2 #0004 ADD2 
	;pos/score-y LDA2 #0036 ADD2
	.score/points LDZ2
	#41
	draw-num
JMP2r

( backgrounds )

@draw-bg ( -- )
	( background )
	;bg/grid-dot .Screen/addr DEO2
	#f2 .Screen/auto DEO
	#0000 .Screen/x DEO2
	&bg-x
		.Screen/x DEI2 #0100 GTH2
			?&bg-done
		#0000 .Screen/y DEO2
		&bg-y
			#03 .Screen/sprite DEO
			.Screen/y DEI2 #0100 LTH2 
				?&bg-y
		.Screen/x DEI2 #0080 ADD2 .Screen/x DEO2
		!&bg-x
	&bg-done

	( main field )
	;pos/well-x LDA2 .Screen/x DEO2
	;pos/well-y LDA2 .Screen/y DEO2
	;pos/well-w LDA
	;pos/well-h LDA
	#8a draw-box 

	;bg/dots .Screen/addr DEO2
	;pos/well-x LDA2 .Screen/x DEO2
	;pos/well-y LDA2 .Screen/y DEO2
	;pos/well-w LDA
	;pos/well-h LDA
	#03 #07 draw-texture

	( next piece )
	;pos/next-x LDA2 .Screen/x DEO2
	;pos/next-y LDA2 .Screen/y DEO2
	;pos/next-w LDA
	;pos/next-h LDA
	#8a draw-box

	;bg/dots2 .Screen/addr DEO2
	;pos/next-x LDA2 .Screen/x DEO2
	;pos/next-y LDA2 .Screen/y DEO2
	;pos/next-w LDA
	;pos/next-h LDA
	#03 #01 draw-texture

	;pos/next-x LDA2 #0008 ADD2
	;pos/next-y LDA2 #0004 ADD2 
	;strings/next #02 draw-str

	( score )
	;pos/score-x LDA2 .Screen/x DEO2
	;pos/score-y LDA2 .Screen/y DEO2
	;pos/score-w LDA
	;pos/score-h LDA
	#8a draw-box

	;bg/dots2 .Screen/addr DEO2
	;pos/score-x LDA2 .Screen/x DEO2
	;pos/score-y LDA2 .Screen/y DEO2
	;pos/score-w LDA
	;pos/score-h LDA
	#03 #04 draw-texture

	;pos/score-x LDA2 #0004 ADD2
	;pos/score-y LDA2 #0004 ADD2 
	;strings/level #02 draw-str

	;pos/score-x LDA2 #0004 ADD2
	;pos/score-y LDA2 #0018 ADD2 
	;strings/lines #02 draw-str

	;pos/score-x LDA2 #0004 ADD2
	;pos/score-y LDA2 #002c ADD2 
	;strings/score #02 draw-str
JMP2r

@draw-box ( w h col -- )
	;&col STA #08 MUL ;&h STA #08 MUL ;&w STA

	.Screen/x DEI2 #0008 SUB2 .Screen/x DEO2
	.Screen/y DEI2 #0008 SUB2 .Screen/y DEO2

	( tl )
	#01 .Screen/auto DEO
	;border-chr/corner .Screen/addr DEO2
	#00 ;&put JSR2
	( top )
	;border-chr/edge-hor .Screen/addr DEO2
	#00 [ LIT &w $1 ] ;&putn &brk JSR2
	( tr )
	#02 .Screen/auto DEO
	;border-chr/corner .Screen/addr DEO2
	#10 ;&put JSR2
	( right )
	;border-chr/edge-ver .Screen/addr DEO2
	#10 [ LIT &h $1 ] ;&putn JSR2
	( br )
	;border-chr/corner .Screen/addr DEO2
	#30 ;&put JSR2
	( left )
	.Screen/x DEI2 #00 ;&w LDA #08 ADD SUB2 .Screen/x DEO2
	.Screen/y DEI2 #00 ;&h LDA #08 ADD SUB2 .Screen/y DEO2
	;border-chr/edge-ver .Screen/addr DEO2
	#00 ;&h LDA ;&putn JSR2
	( bl )    
	#01 .Screen/auto DEO
	;border-chr/corner .Screen/addr DEO2
	#20 ;&put JSR2
	( bottom )
	;border-chr/edge-hor .Screen/addr DEO2
	#20 ;&w LDA ;&putn JSR2
JMP2r
	&put ( flags -- )
		[ LIT &col $1 ] ORA .Screen/sprite DEO
	JMP2r
	&putn ( n flags -- )
		&wloop OVR ,&put JSR #08 SUB DUP ?&wloop
		POP2
	JMP2r

@draw-texture ( w h col mod -- )
	;&mod STA ;&col STA SWP DUP ;&w STA MUL
	#01 .Screen/auto DEO
	&loop
		#01 SUB
		DUP [ LIT &mod $1 ] MOD #00 EQU #70 SFT 
		OVR #08 MOD #42 SFT ORA 
		[ LIT &col $1 ] ORA .Screen/sprite DEO
		DUP #00 EQU
			?&done
		DUP [ LIT &w $1 ] MOD
			?&loop
		&line
		.Screen/x DEI2 #0008 #00 ;&w LDA MUL2 SUB2 .Screen/x DEO2
		.Screen/y DEI2 #0008 ADD2 .Screen/y DEO2
			!&loop
	&done POP
JMP2r

( text )

@draw-str ( x* y* text* color -- )
	#01 .Screen/auto DEO
	STH
	SWP2 .Screen/y DEO2
	SWP2 .Screen/x DEO2
	&loop
		LDAk #20 SUB #00 SWP #30 SFT2 ;font ADD2 .Screen/addr DEO2
		STHkr .Screen/sprite DEO
		INC2 LDAk ?&loop
	POP2
	STHr POP
	#00 .Screen/auto DEO
JMP2r

@draw-num ( *x *y num* color -- )
	#01 .Screen/auto DEO
	STH
	SWP2 .Screen/y DEO2
	SWP2 .Screen/x DEO2
	#2710 DIV2k DUP2 NIP ,&digit JSR MUL2 SUB2
	#03e8 DIV2k DUP2 NIP ,&digit JSR MUL2 SUB2
	#0064 DIV2k DUP2 NIP ,&digit JSR MUL2 SUB2 NIP
	#0a DIVk DUP ,&digit JSR MUL SUB
	,&p-digit JSR
	STHr POP
	#00 .Screen/auto DEO
JMP2r
	&digit ( chr -- )
		DUP ?&p-digit POP #0000 !&put
		&p-digit 
		#10 ADD #00 SWP #30 SFT2 
		&put
		;font ADD2 .Screen/addr DEO2
		OVR2r NIPr STHr .Screen/sprite DEO
	JMP2r

( assets )

@theme
	&set ( addr* -- )
		INC2k INC2 INC2k INC2
		LDA2 .System/b DEO2
		LDA2 .System/g DEO2
		LDA2 .System/r DEO2 
	JMP2r
	&mono    c359 c359 d46a
	&cga-ish 0ea5 0cf2 09d9 

@strings
	&level "LEVEL $1
	&lines "LINES $1
	&score "SCORE $1
	&next "NEXT $1
@pieces
	&i 0f00 4444 0f00 4444
	&s 4620 6c00 4620 6c00
	&l 4460 0e80 c440 2e00
	&b 6600 6600 6600 6600
	&t 4640 0e40 4c40 4e00
	&z 2640 c600 2640 c600
	&j 6440 e200 44c0 08e0

@blank-chr
	ffff ffff ffff ffff
@block-icn
	7e81 8181 8181 817f
	007f 7f7f 7f7f 7f7f
@blocks-icn
	&a
	007e 7e7e 7e7e 7e00
	ff81 8181 8181 81ff
	&b
	007e 7e66 667e 7e00
	ff81 bdbd bdbd 81ff
	&c
	007e 425a 5a42 7e00
	ff81 bda5 a5bd 81ff
	&e
	007e 7e7e 7e7e 7e00
	ffab d5ab d5ab d5ff
	&f
	007e 7e7e 7e7e 7e00
	ff99 b3e7 cd99 b3ff
	&d
	007c 7a76 6e5e 3e00
	ff83 8589 91a1 c1ff
@ghost-icn
	aa01 8001 8001 8055
	0000 0000 0000 0000

@border-chr
	&corner
	0000 0000 0000 0001
	0000 0000 0000 0000
	&edge-ver
	0101 0101 0101 0101
	0202 0202 0202 0202
	&edge-hor
	0000 0000 0000 00ff
	0000 0000 0000 ff00
@border2-chr
	&corner
	0000 0000 0000 0303
	0000 0000 0001 0004
	&edge-ver
	0303 0303 0303 0303
	0404 0404 0404 0404
	&edge-hor
	0000 0000 0000 ffff
	0000 0000 00ff 0000
@border3-chr
	&corner
	0000 0000 0003 0707
	0000 0000 0304 0808
	&edge-ver
	0707 0707 0707 0707
	0808 0808 0808 0808
	&edge-hor
	0000 0000 00ff ffff
	0000 0000 ff00 0000
@bg
	&stripes
	030c 30c0 030c 30c0
	e38f 3ef8 e38f 3ef8
	&dots
	0000 4000 0000 1000
	0000 4000 0000 0000
	&dots2
	0000 4000 0000 1000
	0000 4000 0200 0000
	&grid
	2020 2020 20ff 2020
	0000 0000 0000 0000
	&grid-dot
	0010 0010 aa10 0010
	0000 0000 0000 0000
	&grid-dot2
	2000 2000 2055 2000
	0000 0000 0000 0000

( game data )

|4000

@well $200 &end
@well-next $40 &end

@font ( atari8.uf1 )
	0000 0000 0000 0000 6060 6060 6000 6000
	6666 6600 0000 0000 006c fe6c 6cfe 6c00
	183e 603c 067c 1800 0066 6c18 3066 4600
	386c 3870 decc 7600 6060 6000 0000 0000
	0e1c 1818 181c 0e00 7038 1818 1838 7000
	0066 3cff 3c66 0000 0018 187e 1818 0000
	0000 0000 0030 3060 0000 007e 0000 0000
	0000 0000 0018 1800 0206 0c18 3060 4000
	&num
	3c66 6e76 6666 3c00 1838 1818 1818 7e00
	3c66 060c 1830 7e00 7e0c 180c 0666 3c00
	0c1c 3c6c 7e0c 0c00 7e60 7c06 0666 3c00
	3c60 607c 6666 3c00 7e06 0c18 3030 3000
	3c66 663c 6666 3c00 3c66 663e 060c 3800
	0060 6000 6060 0000 0030 3000 3030 6000
	0c18 3060 3018 0c00 0000 7e00 007e 0000
	6030 180c 1830 6000 3c66 060c 1800 1800
	3c66 6e6a 6e60 3e00 183c 6666 7e66 6600
	7c66 667c 6666 7c00 3c66 6060 6066 3c00
	786c 6666 666c 7800 7e60 607c 6060 7e00
	7e60 607c 6060 6000 3e60 606e 6666 3e00
	6666 667e 6666 6600 7830 3030 3030 7800
	0606 0606 0666 3c00 666c 7870 786c 6600
	6060 6060 6060 7e00 c6ee fed6 c6c6 c600
	6676 7e7e 6e66 6600 3c66 6666 6666 3c00
	7c66 667c 6060 6000 3c66 6666 766c 3600
	7c66 667c 6c66 6600 3c66 603c 0666 3c00
	7e18 1818 1818 1800 6666 6666 6666 3e00
	6666 6666 663c 1800 c6c6 c6d6 feee c600
	6666 3c18 3c66 6600 6666 663c 1818 1800
	7e06 0c18 3060 7e00 7860 6060 6060 7800

@costab
	fe fd fd fd fd fd fc fc fb fa fa f9 f8 f7 f6 f5
	f4 f3 f1 f0 ef ed eb ea e8 e6 e5 e3 e1 df dd da
	d8 d6 d4 d1 cf cd ca c8 c5 c2 c0 bd ba b8 b5 b2
	af ac a9 a6 a3 a0 9d 9a 97 94 91 8e 8b 88 85 82
	7f 7b 78 75 72 6f 6c 69 66 63 60 5d 5a 57 54 51
	4e 4b 48 45 43 40 3d 3b 38 35 33 30 2e 2c 29 27
	25 23 20 1e 1c 1a 18 17 15 13 12 10 0e 0d 0c 0a
	09 08 07 06 05 04 03 03 02 01 01 00 00 00 00 00
	00 00 00 00 00 00 01 01 02 03 03 04 05 06 07 08
	09 0a 0c 0d 0e 10 12 13 15 17 18 1a 1c 1e 20 23
	25 27 29 2c 2e 30 33 35 38 3b 3d 40 43 45 48 4b
	4e 51 54 57 5a 5d 60 63 66 69 6c 6f 72 75 78 7b
	7e 82 85 88 8b 8e 91 94 97 9a 9d a0 a3 a6 a9 ac
	af b2 b5 b8 ba bd c0 c2 c5 c8 ca cd cf d1 d4 d6
	d8 da dd df e1 e3 e5 e6 e8 ea eb ed ef f0 f1 f3
	f4 f5 f6 f7 f8 f9 fa fa fb fc fc fd fd fd fd fd
