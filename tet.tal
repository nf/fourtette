(

fourtette, a falling block game by nf@wh3rd.net

Technical notes:

The playable well is 10 columns by 40 rows, as per the guideline. It is stored
in a x10 by x30 region of memory starting at @well. Each row is x10 bytes, with
the playable well in columns (x03, x0c), so the three bytes at the start and
end of each line are not usable and form the walls.

The high nibble of each well byte indicates the block state (for gameplay
purposes), the low nibble indicates the block type (for drawing purposes).

 [ 8 4 2 1 8 4 2 1 ]
   | | | | |  \|/
   | | | | |   type (0-6 normal pieces, 7 ghost)
   | | | | unused
   | | | falling  - set by set-cur-piece
   | | frozen     - set by freeze-cur-piece
   | compacting   - set and cleared by compact-well
   wall/bottom    - set by init-well

)

( macros )

%MOD   { DIVk MUL SUB }
%debug { #f4 .System/debug DEO }
%halt  { #81 .System/halt DEO }

( devices )

|00 @System     [ &vector $2 &wst      $1 &rst    $1 &pad   $4 &r      $2 &g      $2 &b    $2 &debug  $1 &halt $1 ]
|10 @Console    [ &vector $2 &read     $1 &pad    $5 &write $1 &error  $1 ]
|20 @Screen     [ &vector $2 &width    $2 &height $2 &auto  $1 &pad    $1 &x      $2 &y    $2 &addr   $2 &pixel $1 &sprite $1 ]
|30 @Audio0     [ &vector $2 &position $2 &output $1 &pad   $3 &adsr   $2 &length $2 &addr $2 &volume $1 &pitch $1 ]
|80 @Controller [ &vector $2 &button   $1 &key    $1 ]
|c0 @DateTime   [ &year   $2 &month    $1 &day    $1 &hour  $1 &minute $1 &second $1 &dotw $1 &doty   $2 &isdst $1 ]

( variables )

|0000

|0010

( the piece controlled by the player )
@cur   &type $1 &rot $1 &x $1 &y $1
( a virtual piece used to cur piece movement )
@test  &type $1 &rot $1 &x $1 &y $1
( a virtual piece that sits where cur would drop )
@ghost &type $1 &rot $1 &x $1 &y $1
( the next pieces to enter the field )
@next $5
( the hold piece )
@hold &type $1 &ok $1

@score
	&level $1
	&lines $2
	&points $2

( program )

|0100 ( -> )
	( theme ) 
	;theme/mono theme/set

	( vectors )
	;on-frame .Screen/vector DEO2
	;button/vector .Controller/vector DEO2

	( resize )
	#0100 .Screen/width DEO2
	#0100 .Screen/height DEO2

	draw-bg
	init-prng
	restart
BRK

@restart ( -- )
	#00 ;on-frame/is-dead STA
	#00 .score/level STZ
	#0000 .score/lines STZ2
	#0000 .score/points STZ2
	init-well
	init-level
	init-pieces
JMP2r

@on-frame ( -> )
	[ LIT &is-dead $1 ]
		?game-over

	( press start to pause )
	#08 button/pressed #00 EQU
		?&no-pause
	,&is-paused LDR #01 EOR ,&is-paused STR
	&no-pause

	[ LIT &is-paused $1 ]
		?&draw

	.ghost clear-piece
	.cur clear-piece

	[ LIT &is-compact $1 ]
		?&no-compact
	compact-well ,&is-compact STR 
		!&update
	&no-compact
	
	( swap hold piece )
	#04 button/pressed #00 EQU
		?&no-hold
	( only allow one swap per freeze )
	[ LIT &hold-swapped $1 ]
		?&no-hold
	( put cur piece in hold )
	#01 ,&hold-swapped STR
	[ LIT &not-held 01 ]
		?&first-hold
	( swap hold and cur )
	;sfx/hold play-sample
	init-cur-pos
	.cur/type LDZ .hold/type LDZ .cur/type STZ .hold/type STZ
		!&update
	( no piece held yet )
	&first-hold
	;sfx/hold play-sample
	#00 ,&not-held STR 
	.cur/type LDZ .hold/type STZ
	#01 .hold/ok STZ
		!&make-new-piece
	&no-hold

	.test .cur copy-piece

	( handle rot change )
	.cur/type LDZ #03 EQU ( b can't rotate )
		?&rot-done
	#01 button/pressed #03 MUL
	#02 button/pressed 
	ADD
	DUP #03 EQU ,&rot-anti STR
	.cur/rot LDZ ADD #04 MOD
	DUP .test/rot STZ .cur/rot LDZ EQU
		?&rot-done
	( try in place )
	.test try-piece #00 EQU
		?&rot-ok
	( try kicks )
	[ LIT &rot-anti $1 ] try-kick
		?&rot-done
	( rot changed )
	&rot-ok
	;sfx/rot play-sample
	.cur .test copy-piece
	#00 ;&freeze-timer STA
	&rot-done

	( handle x change )
	#80 button/pressed ( right )
	#40 button/pressed SUB ( left )
	DUP .cur/x LDZ ADD .test/x STZ #00 EQU
		?&no-x
	.test try-piece
		?&no-x
	( x changed )
	;sfx/x play-sample
	.cur .test copy-piece
	#00 ;&freeze-timer STA
	&no-x

	( up button - hard drop )
	#10 button/pressed #00 EQU
		?&no-up
	update-ghost
	.cur .ghost copy-piece
		!&freeze
	&no-up

	( gravity )
	[ LIT &speed $1 ]
		?&gravity-tick
	( instant drop - like hard drop but don't freeze immediately )
	update-ghost
	.cur .ghost copy-piece
		!&run-freeze-timer
	( normal drop - descend 1 row every &speed frames )
	&gravity-tick
	[ LIT &tick $1 ] INC ,&speed LDR MOD DUP ,&tick STR #00 EQU
		?&inc-y

	( down button - soft drop )
	#20 button/held
		?&inc-y

	!&maybe-freeze

	( try to increment y )
	&inc-y
		.test .cur copy-piece
		.test/y LDZ INC .test/y STZ
		.test try-piece
			?&run-freeze-timer ( blocked )
		( y changed )
		.cur .test copy-piece
		( ghost is unchanged )
		!&update
	( check if the freeze timer has expired, if running )
	&maybe-freeze
		[ LIT &freeze-timer $1 ] #00 EQU
			?&update
		&run-freeze-timer
		,&freeze-timer LDR #1e GTH
			?&freeze
		,&freeze-timer LDR INC ,&freeze-timer STR
			!&update
	( freeze the current piece )
	&freeze
		;sfx/freeze play-sample
		freeze-cur-piece
	( create a new piece )
	&make-new-piece
		#00 ,&freeze-timer STR
		#00 ;&hold-swapped STA
		new-piece
		( if the new piece doesn't fit, die )
		.cur try-piece
			?&die
		#00 ;&is-compact STA ( compact next frame )

	( update the current piece and ghost ) 
	&update
		update-ghost
		set-ghost-piece
		set-cur-piece
			!&draw

	&die
		#01 ;&is-dead STA
		#0280 ;game-over/n STA2

	&draw
		draw-fg
BRK

@game-over
	[ LIT2 &n $2 ] #0140 LTH2
		?&draw
	,&n LDR2 #0002 SUB2 ,&n STR2
	,&n LDR2 ;well ADD2
		DUP #07 MOD #10 ORA
		OVR INC #07 MOD #10 ORA
	#00
	,&n LDR2 #01d0 LTH2
	,&n LDR2 #01f0 GTH2
		EOR MUL2
	SWP2 STA2

	&draw
	draw-fg

	,&n LDR2 #01d0 GTH2
		?&done
	;pos/well-x LDA2 #0004 ADD2
	;pos/well-y LDA2 #004d ADD2 
	;strings/game-over #41 draw-str

	#08 button/pressed #00 EQU
		?&done
	restart
	&done
BRK

@update-ghost
	.ghost .cur copy-piece
	&loop
		.ghost/y LDZ INC .ghost/y STZ
		.ghost try-piece #00 EQU 
			?&loop
	.ghost/y LDZ #01 SUB .ghost/y STZ
JMP2r

@try-kick ( anti-clockwise -- blocked )
	#00 SWP #08 MUL
	#00 .test/type LDZ #00 EQU #40 MUL
	#00 .test/rot LDZ #10 MUL
	;kicks ADD2 ADD2 ADD2 ,&addr STR2
	#00 ,&offs STR
	&loop
		[ LIT2 &addr $2 ] #00 [ LIT &offs $1 ] ADD2 INCk2
		LDA .test/y LDZ ADD .test/y STZ
		LDA .test/x LDZ ADD .test/x STZ
		.test try-piece
			?&next
	#00 ( kick succeeded )
JMP2r
	&next ( reset and try next kick, if any left )
		.cur/x LDZ .test/x STZ 
		.cur/y LDZ .test/y STZ
		,&offs LDR #02 ADD DUP ,&offs STR #08 LTH
			?&loop
	#01 ( all kicks blocked )
JMP2r

@button
	[ LIT &state $1 ]
&vector ( -> )
	.Controller/button DEI DUP
	,&state STR
	[ LIT &debounce $1 ] AND ,&debounce STR
BRK
&held ( code -- held )
	DUP ,&state LDR AND EOR #00 EQU
JMP2r
&pressed ( code -- pressed )
	DUP ,&state LDR AND
		?&pressed-debounce
	&not-pressed
	POP #00
JMP2r
&pressed-debounce
	DUP
	,&debounce LDR AND
		?&not-pressed
	,&debounce LDR ORA ,&debounce STR
	#01
JMP2r

@init-pieces ( -- )
	#00 &loop new-piece INC DUP #06 LTH ?&loop POP
JMP2r

@init-level ( -- )
	#00 .score/level LDZ ;level-speeds ADD2 LDA
	;on-frame/speed STA
JMP2r

@init-well ( -- )
	;well &loop
		DUP2 #0fff AND2 #027f GTH2
			?&block
		DUP #0f AND #03 LTH
			?&block
		DUP #0f AND #0c GTH
			?&block
		&space #00
			!&store
		&block #80
		&store ROT ROT STAk ROT POP
		INC2 DUP2 #0fff AND2 #0300 LTH2
			?&loop
	POP2
JMP2r

@compact-well ( -- noop )
	#00 ;&lines STA
	#00 ,&line-sum STR
	;well #0002 ADD2 &loop
		INC2
		DUP2 #0fff AND2 #027f GTH2
			?&done
		DUP #0f AND #0c GTH
			?&eol
		( sum block high nibble )
		LDAk #04 SFT [ LIT &line-sum $1 ] ADD ,&line-sum STR
			!&loop
		&eol
			,&line-sum LDR #14 EQU
				?&hl-line
			,&line-sum LDR #28 EQU
				?&rem-line
			!&cont
			&hl-line 
				DUP2 #000a SUB2
				&hl-block
					DUP2 LDAk #8f AND #40 ORA ROT ROT STA
					INC2 GTH2k
						?&hl-block
				,&lines LDR INC ,&lines STR
				POP2
				!&cont
			&rem-line
				remove-well-line
				#00
				JMP2r
			&cont
			#00 ,&line-sum STR
			#0005 ADD2
				!&loop
	&done POP2

	,&lines LDR
		?&inc-score
	#01
JMP2r
	&inc-score
		.score/lines LDZ2 ,&before-lines STR2

		#00 [ LIT &lines $1 ] .score/lines LDZ2 ADD2 .score/lines STZ2
		#00 ,&lines LDR DUP MUL .score/points LDZ2 ADD2 .score/points STZ2

		.score/level LDZ #1e EQU
			?&score-done
		[ LIT2 &before-lines $2 ] #000a DIV2 .score/lines LDZ2 #000a DIV2 EQU2
			?&score-done
		.score/level LDZ INC .score/level STZ
		init-level

		&score-done
		#00
	JMP2r

@remove-well-line ( well-addr-on-line -- )
	#fff0 AND2 #0010 ADD2 ( go to end of this line )
	&loop
		#0001 SUB2
		( read block from line above )
		DUP2k #0010 SUB2 LDA
		( store block in current line )
		ROT ROT STA
		( see if we're done )
		DUP2 #0fff AND2 #0010 GTH2
			?&loop
	POP2
JMP2r

@copy-piece ( dst src -- )
	SWPk INC SWP INC
	SWPk INC SWP INC
	SWPk INC SWP INC
	LDZ SWP STZ
	LDZ SWP STZ
	LDZ SWP STZ
	LDZ SWP STZ
JMP2r

@init-cur-pos ( -- )
	#06 .cur/x STZ
	#11 .cur/y STZ
	#00 .cur/rot STZ
JMP2r

@new-piece ( -- )
	init-cur-pos
	.next LDZ .cur/type STZ
	#00 &loop
		INCk .next ADD LDZ
		OVR .next ADD STZ
		INC DUP #04 LTH
			?&loop
	.next ADD
	next-piece-type SWP STZ
JMP2r

@set-piece ( piece val -- )
	,&val STR
	;&each each-piece-block
JMP2r
	&each ( well-offset -- )
		;well ADD2 [ LIT &val $1 ] ROT ROT STA
	JMP2r

@set-cur-piece ( -- )
	.cur DUP LDZ #10 ORA set-piece
JMP2r

@freeze-cur-piece ( -- )
	.cur DUP LDZ #20 ORA set-piece
JMP2r

@set-ghost-piece ( -- )
	.ghost #07 set-piece
JMP2r

@clear-piece ( -- )
	#00 set-piece
JMP2r

( tries to move cur to test, reports whether it failed )
@try-piece ( piece -- blocked )
	#00 ,&blocked STR
	;&each each-piece-block
	,&blocked LDR
JMP2r
	&each ( well-offset -- )
		;well ADD2 LDA #e0 AND
		[ LIT &blocked $1 ] ORA ,&blocked STR
	JMP2r

@piece-bits ( rot type -- piece-bits* )
	#30 SFT ( type ) 
	SWP #10 SFT ( rot )
	ADD #00 SWP
	;pieces ADD2 LDA2 ( piece16 )
JMP2r

@each-piece-block ( piece each-func* -- )
	,&each-func STR2
	LDZk ( type ) SWP INC LDZk ( rot )
	SWP INC LDZk ( x ) SWP INC LDZ ( y )
	#00 SWP #0010 MUL2 ROT #00 SWP ADD2 ,&offset STR2
	SWP piece-bits ;&each each-piece-bits-block
JMP2r
	&each
		DUP #0c AND #02 SFT #10 MUL
		SWP #03 AND ADD
		#00 SWP [ LIT2 &offset $2 ] ADD2
		[ LIT2 &each-func $2 ] JMP2

@each-piece-bits-block ( piece-bits* each-func* -- )
	,&each-func STR2 ,&piece-bits STR2
	( go backward from bottom-right, as we
	  consume piece-bits least-to-most significant )
	#0f &loop
		( test whether a piece block is at woffs )
		[ LIT2 &piece-bits $2 ] NIP #01 AND #01 NEQ ?&no
			DUP [ LIT2 &each-func $2 ] JSR2
		&no

		#01 SUB
		( shift piece-bits right )
		,&piece-bits LDR2 #01 SFT2 DUP2 ,&piece-bits STR2
		( continue if there are more blocks )
		#0000 GTH2
			?&loop
	POP
JMP2r

@next-piece-type
	[ LIT &len $1 ]
		?&pop
	( fill bag 0-6 )
	;&bag #00 &fill
		ROT ROT STAk
		INC2 ROT INC DUP #07 LTH
			?&fill
	,&len STR POP2
	( shuffle bag )
	;&bag #07 shuffle
	( pop type from bag )
	&pop
	,&len LDR #01 SUB DUP ,&len STR
	#00 SWP ;&bag ADD2 LDA
JMP2r
	[ &bag $7 ]

( draw game state )

@pos
	&well-x 0058
	&well-y 0030
	&well-w 0a
	&well-h 14

	&next-x 00b0
	&next-y 0030
	&next-w 06
	&next-h 0f

	&hold-x 00b0
	&hold-y 00b0
	&hold-w 06
	&hold-h 04

	&score-x 0020
	&score-y 0030
	&score-w 06
	&score-h 08

@draw-fg
	( clear )
	#0000 .Screen/x DEO2
	#0000 .Screen/y DEO2
	#c0 .Screen/pixel DEO

	draw-next
	draw-hold
	draw-score

	;on-frame/is-paused LDA
		?draw-pause

	( clear well background here,
	  because draw-pause may have painted it )
	;zero .Screen/addr DEO2
	;pos/well-x LDA2 .Screen/x DEO2
	;pos/well-y LDA2 .Screen/y DEO2
	;pos/well-w LDA
	;pos/well-h LDA
	#00 draw-sprite-rect

	draw-well
JMP2r

@draw-pause
	;bg/stripes .Screen/addr DEO2
	;pos/well-x LDA2 .Screen/x DEO2
	;pos/well-y LDA2 .Screen/y DEO2
	;pos/well-w LDA
	;pos/well-h LDA
	#03 draw-sprite-rect

	#006a #0080 ;strings/pause #41 draw-str
JMP2r

@draw-next
	#00 ,&n STR
	&loop
		;pos/next-x LDA2 #0008 ADD2
		;pos/next-y LDA2 #000b ADD2 #0015 #00 ,&n LDR MUL2 ADD2
		.next ,&n LDR ADD LDZ
		draw-piece
		[ LIT &n $1 ] INC DUP ,&n STR #05 LTH
			?&loop
JMP2r

@draw-hold
	.hold/ok LDZ #00 EQU
		?&done
	;pos/hold-x LDA2 #0008 ADD2
	;pos/hold-y LDA2 #0009 ADD2
	.hold/type LDZ
	draw-piece
	&done
JMP2r

( draw piece centered )
@draw-piece ( screen-x* screen-y* type -- )
	,&type STR 
	#00 ,&type LDR #00 NEQ #0004 MUL2 ADD2 ,&screen-y STR2
	#00 ,&type LDR DUP #00 NEQ SWP #03 NEQ AND #0004 MUL2 ADD2 ,&screen-x STR2
	#00 ,&type LDR piece-bits ;&each each-piece-bits-block
JMP2r
	&each
		DUP
		#03 AND #08 MUL #00 SWP [ LIT2 &screen-x $2 ] ADD2 .Screen/x DEO2
		#02 SFT #08 MUL #00 SWP [ LIT2 &screen-y $2 ] ADD2 .Screen/y DEO2
		[ LIT &type $1 ] #10 ORA ;draw-block JMP2

@draw-well ( -- )
	;pos/well-x LDA2 .Screen/x DEO2
	;pos/well-y LDA2 .Screen/y DEO2
	#01 .Screen/auto DEO
	;well #0142 ADD2 &loop
		INC2
		DUP2 #0fff AND2 #027f GTH2
			?&done
		DUP #0f AND #0c GTH
			?&eol
		DUP2 LDA draw-block
			!&loop
		&eol
			.Screen/x DEI2 #0050 SUB2 .Screen/x DEO2
			.Screen/y DEI2 #0008 ADD2 .Screen/y DEO2
			#0005 ADD2
			!&loop
	&done POP2
JMP2r

@draw-block ( block-type -- )
	DUP #77 AND
		?&block
	POP
	;zero .Screen/addr DEO2
	#40 .Screen/sprite DEO
JMP2r
	&block
		#07 AND #03 MUL #00 SWP ;piece-sprites ADD2
		INC2k INC2 LDA ROT ROT LDA2
		.Screen/addr DEO2
		.Screen/sprite DEO
	JMP2r

@draw-score ( -- )
	;pos/score-x LDA2 #0004 ADD2 
	;pos/score-y LDA2 #000e ADD2
	#00 .score/level LDZ
	#41
	draw-num
	;pos/score-x LDA2 #0004 ADD2 
	;pos/score-y LDA2 #0022 ADD2
	.score/lines LDZ2
	#41
	draw-num
	;pos/score-x LDA2 #0004 ADD2 
	;pos/score-y LDA2 #0036 ADD2
	.score/points LDZ2
	#41
	draw-num
JMP2r

( backgrounds )

@draw-bg ( -- )
	( background )
	;bg/grid-dot .Screen/addr DEO2
	#0000 .Screen/x DEO2
	#0000 .Screen/y DEO2
	#20 #20 #03 draw-sprite-rect

	( main field )
	;pos/well-x LDA2 .Screen/x DEO2
	;pos/well-y LDA2 .Screen/y DEO2
	;pos/well-w LDA
	;pos/well-h LDA
	#8a draw-box 

	( next piece )
	;pos/next-x LDA2 .Screen/x DEO2
	;pos/next-y LDA2 .Screen/y DEO2
	;pos/next-w LDA
	;pos/next-h LDA
	#8a draw-box

	;zero .Screen/addr DEO2
	;pos/next-x LDA2 .Screen/x DEO2
	;pos/next-y LDA2 .Screen/y DEO2
	;pos/next-w LDA
	;pos/next-h LDA
	#00 draw-sprite-rect

	;pos/next-x LDA2 #0008 ADD2
	;pos/next-y LDA2 #0003 ADD2 
	;strings/next #02 draw-str

	( hold piece )
	;pos/hold-x LDA2 .Screen/x DEO2
	;pos/hold-y LDA2 .Screen/y DEO2
	;pos/hold-w LDA
	;pos/hold-h LDA
	#8a draw-box

	;zero .Screen/addr DEO2
	;pos/hold-x LDA2 .Screen/x DEO2
	;pos/hold-y LDA2 .Screen/y DEO2
	;pos/hold-w LDA
	;pos/hold-h LDA
	#00 draw-sprite-rect

	;pos/hold-x LDA2 #0008 ADD2
	;pos/hold-y LDA2 #0003 ADD2 
	;strings/hold #02 draw-str

	( score )
	;pos/score-x LDA2 .Screen/x DEO2
	;pos/score-y LDA2 .Screen/y DEO2
	;pos/score-w LDA
	;pos/score-h LDA
	#8a draw-box

	;zero .Screen/addr DEO2
	;pos/score-x LDA2 .Screen/x DEO2
	;pos/score-y LDA2 .Screen/y DEO2
	;pos/score-w LDA
	;pos/score-h LDA
	#00 draw-sprite-rect

	;pos/score-x LDA2 #0004 ADD2
	;pos/score-y LDA2 #0004 ADD2 
	;strings/level #02 draw-str

	;pos/score-x LDA2 #0004 ADD2
	;pos/score-y LDA2 #0018 ADD2 
	;strings/lines #02 draw-str

	;pos/score-x LDA2 #0004 ADD2
	;pos/score-y LDA2 #002c ADD2 
	;strings/score #02 draw-str
JMP2r

@draw-box ( w h col -- )
	;&col STA #08 MUL ;&h STA #08 MUL ;&w STA

	.Screen/x DEI2 #0008 SUB2 .Screen/x DEO2
	.Screen/y DEI2 #0008 SUB2 .Screen/y DEO2

	( tl )
	#01 .Screen/auto DEO
	;border-chr/corner .Screen/addr DEO2
	#00 ;&put JSR2
	( top )
	;border-chr/edge-hor .Screen/addr DEO2
	#00 [ LIT &w $1 ] ;&putn &brk JSR2
	( tr )
	#02 .Screen/auto DEO
	;border-chr/corner .Screen/addr DEO2
	#10 ;&put JSR2
	( right )
	;border-chr/edge-ver .Screen/addr DEO2
	#10 [ LIT &h $1 ] ;&putn JSR2
	( br )
	;border-chr/corner .Screen/addr DEO2
	#30 ;&put JSR2
	( left )
	.Screen/x DEI2 #00 ;&w LDA #08 ADD SUB2 .Screen/x DEO2
	.Screen/y DEI2 #00 ;&h LDA #08 ADD SUB2 .Screen/y DEO2
	;border-chr/edge-ver .Screen/addr DEO2
	#00 ;&h LDA ;&putn JSR2
	( bl )    
	#01 .Screen/auto DEO
	;border-chr/corner .Screen/addr DEO2
	#20 ;&put JSR2
	( bottom )
	;border-chr/edge-hor .Screen/addr DEO2
	#20 ;&w LDA ;&putn JSR2
JMP2r
	&put ( flags -- )
		[ LIT &col $1 ] ORA .Screen/sprite DEO
	JMP2r
	&putn ( n flags -- )
		&wloop OVR ,&put JSR #08 SUB DUP ?&wloop
		POP2
	JMP2r

@draw-sprite-rect ( w h col -- )
	;&col STA
	SWP DUP ,&w STR
	#00 SWP ROT #00 SWP MUL2
	#01 .Screen/auto DEO
	&loop
		#0001 SUB2
		[ LIT &col $1 ] .Screen/sprite DEO
		DUP2 #0000 EQU2
			?&done
		DUP2 #00 [ LIT &w $1 ] DIV2k MUL2 SUB2 NIP
			?&loop
		&line
		.Screen/x DEI2 #0008 #00 ;&w LDA MUL2 SUB2 .Screen/x DEO2
		.Screen/y DEI2 #0008 ADD2 .Screen/y DEO2
			!&loop
	&done POP2
JMP2r

( text )

@draw-str ( x* y* text* color -- )
	#01 .Screen/auto DEO
	STH
	SWP2 .Screen/y DEO2
	SWP2 .Screen/x DEO2
	&loop
		LDAk #20 SUB #00 SWP #30 SFT2 ;font ADD2 .Screen/addr DEO2
		STHkr .Screen/sprite DEO
		INC2 LDAk ?&loop
	POP2
	STHr POP
	#00 .Screen/auto DEO
JMP2r

@draw-num ( *x *y num* color -- )
	#01 .Screen/auto DEO
	STH
	SWP2 .Screen/y DEO2
	SWP2 .Screen/x DEO2
	#2710 DIV2k DUP2 NIP ,&digit JSR MUL2 SUB2
	#03e8 DIV2k DUP2 NIP ,&digit JSR MUL2 SUB2
	#0064 DIV2k DUP2 NIP ,&digit JSR MUL2 SUB2 NIP
	#0a DIVk DUP ,&digit JSR MUL SUB
	,&p-digit JSR
	STHr POP
	#00 .Screen/auto DEO
JMP2r
	&digit ( chr -- )
		DUP ?&p-digit POP #0000 !&put
		&p-digit 
		#10 ADD #00 SWP #30 SFT2 
		&put
		;font ADD2 .Screen/addr DEO2
		OVR2r NIPr STHr .Screen/sprite DEO
	JMP2r

@play-sample ( addr* -- )
	DUP2 LDA2 .Audio0/length DEO2
	INC2 INC2 .Audio0/addr DEO2
	#00f0 .Audio0/adsr DEO2
	#ff .Audio0/volume DEO
	#bc .Audio0/pitch DEO
JMP2r

( prng )

@init-prng ( -- )
	#00 .DateTime/second DEI
	#00 .DateTime/minute DEI #60 SFT2 EOR2
	#00 .DateTime/hour DEI #c0 SFT2 EOR2 ,prng/x STR2
	#00 .DateTime/hour DEI #04 SFT2
	#00 .DateTime/day DEI #10 SFT2 EOR2
	#00 .DateTime/month DEI #60 SFT2 EOR2
		.DateTime/year DEI2 #a0 SFT2 EOR2 ,prng/y STR2
JMP2r

@prng ( -- number* )
	LIT2 &x $2
	DUP2 #50 SFT2 EOR2
	DUP2 #03 SFT2 EOR2
	LIT2 &y $2 DUP2 ,&x STR2
	DUP2 #01 SFT2 EOR2 EOR2
	,&y STR2k POP
JMP2r

@randn ( max -- num )
        #00 &mask-loop
                #10 SFT INC
                DUP2 GTH
                        ?&mask-loop
        ,&mask STR
        DUP &loop POP
                prng EOR [ LIT &mask $1 ] AND
                DUP2 LTH
                        ?&loop
        NIP
JMP2r

@shuffle ( addr* len -- )
        ROT ROT ,&a STR2
        &loop
                #01 SUB
                DUP randn #00 SWP ;&a LDA2 ADD2 ;&b STA2
                [ LIT2 &a $2 ] LDA [ LIT2 &b $2 ] LDA
                ;&a LDA2 STA ;&b LDA2 STA
                ;&a LDA2 INC2 ;&a STA2
                DUP #01 GTH
                        ?&loop
        POP
JMP2r

( assets )

@theme
	&set ( addr* -- )
		INC2k INC2 INC2k INC2
		LDA2 .System/b DEO2
		LDA2 .System/g DEO2
		LDA2 .System/r DEO2 
	JMP2r
	&mono    c359 c359 d46a
	&reverse 2d94 2d94 3ea5
	&cga     0f5a 0ff0 0ffa
	&cga-ish 0ea5 0cf2 09d9 

@piece-sprites ( addr* color )
	( i ) =blocks-icn/a c3
	( s ) =blocks-icn/b c3
	( l ) =blocks-icn/c c3
	( b ) =blocks-icn/d c3
	( t ) =blocks-icn/a c1
	( z ) =blocks-icn/b c1
	( j ) =blocks-icn/c c1
	( ghost ) =ghost-icn 41

@strings
	&level "LEVEL $1
	&lines "LINES $1
	&score "SCORE $1
	&next "NEXT $1
	&hold "HOLD $1
	&game-over "GAME 20 "OVER $1
	&pause "PAUSED $1
@pieces
	( i ) 0f00 2222 00f0 4444 
	( s ) 6c00 4620 06c0 8c40
	( l ) 2e00 4460 0e80 c440
	( b ) 6600 6600 6600 6600
	( t ) 4e00 4640 0e40 4c40
	( z ) c600 2640 0c60 4c80
	( j ) 8e00 6440 0e20 44c0
@kicks
	( j, l, t, s, z )
	( 3>>0 ) ff00 ff01 00fe fffe
	( 1>>0 ) 0100 0101 00fe 01fe
	( 0>>1 ) ff00 ffff 0002 ff02
	( 2>>1 ) ff00 ffff 0002 ff02
	( 1>>2 ) 0100 0101 00fe 01fe
	( 3>>2 ) ff00 ff01 00fe fffe
	( 2>>3 ) 0100 01ff 0002 0102
	( 0>>3 ) 0100 01ff 0002 0102
	( i )
	( 3>>0 ) 0100 fe00 0102 feff
	( 1>>0 ) 0200 ff00 02ff ff02
	( 0>>1 ) fe00 0100 fe01 01fe
	( 2>>1 ) 0100 fe00 0102 feff
	( 1>>2 ) ff00 0200 fffe 0201
	( 3>>2 ) fe00 0100 fe01 01fe
	( 2>>3 ) 0200 ff00 02ff ff02
	( 0>>3 ) ff00 0200 fffe 0201

@level-speeds
	35 31 2d 29 25 21 1c 16 11 0b
	0a 09 08 07 07 05 05 04 04 03
	03 03 02 02 02 01 01 01 01 01
	00

@zero
	0000 0000 0000 0000
	0000 0000 0000 0000
@grey-icn
	aa55 55aa aa55 55aa
	0000 0000 0000 0000
@block-icn
	7e81 8181 8181 817f
	007f 7f7f 7f7f 7f7f
@blocks-icn
	&a
	007e 7e7e 7e7e 7e00
	ff81 8181 8181 81ff
	&b
	007e 7e66 667e 7e00
	ff81 bdbd bdbd 81ff
	&c
	007e 425a 5a42 7e00
	ff81 bda5 a5bd 81ff
	&d
	007e 7e7e 7e7e 7e00
	ffab d5ab d5ab d5ff
	&x
	007e 7e7e 7e7e 7e00
	ff99 b3e7 cd99 b3ff
	&y
	007c 7a76 6e5e 3e00
	ff83 8589 91a1 c1ff
@ghost-icn
	aa01 8001 8001 8055
	0000 0000 0000 0000

@border-chr
	&corner
	0000 0000 0000 0001
	0000 0000 0000 0000
	&edge-ver
	0101 0101 0101 0101
	0202 0202 0202 0202
	&edge-hor
	0000 0000 0000 00ff
	0000 0000 0000 ff00
@border2-chr
	&corner
	0000 0000 0000 0303
	0000 0000 0001 0004
	&edge-ver
	0303 0303 0303 0303
	0404 0404 0404 0404
	&edge-hor
	0000 0000 0000 ffff
	0000 0000 00ff 0000
@border3-chr
	&corner
	0000 0000 0003 0707
	0000 0000 0304 0808
	&edge-ver
	0707 0707 0707 0707
	0808 0808 0808 0808
	&edge-hor
	0000 0000 00ff ffff
	0000 0000 ff00 0000
@bg
	&stripes
	030c 30c0 030c 30c0
	e38f 3ef8 e38f 3ef8
	&dots
	0000 4000 0000 1000
	0000 4000 0000 0000
	&dots2
	0000 4000 0000 1000
	0000 4000 0200 0000
	&grid
	2020 2020 20ff 2020
	0000 0000 0000 0000
	&grid-dot
	0010 0010 aa10 0010
	0000 0000 0000 0000
	&grid-dot2
	2000 2000 2055 2000
	0000 0000 0000 0000

( game data )

|4000

@well $300 &end

@font ( atari8.uf1 )
	0000 0000 0000 0000 6060 6060 6000 6000
	6666 6600 0000 0000 006c fe6c 6cfe 6c00
	183e 603c 067c 1800 0066 6c18 3066 4600
	386c 3870 decc 7600 6060 6000 0000 0000
	0e1c 1818 181c 0e00 7038 1818 1838 7000
	0066 3cff 3c66 0000 0018 187e 1818 0000
	0000 0000 0030 3060 0000 007e 0000 0000
	0000 0000 0018 1800 0206 0c18 3060 4000
	&num
	3c66 6e76 6666 3c00 1838 1818 1818 7e00
	3c66 060c 1830 7e00 7e0c 180c 0666 3c00
	0c1c 3c6c 7e0c 0c00 7e60 7c06 0666 3c00
	3c60 607c 6666 3c00 7e06 0c18 3030 3000
	3c66 663c 6666 3c00 3c66 663e 060c 3800
	0060 6000 6060 0000 0030 3000 3030 6000
	0c18 3060 3018 0c00 0000 7e00 007e 0000
	6030 180c 1830 6000 3c66 060c 1800 1800
	3c66 6e6a 6e60 3e00 183c 6666 7e66 6600
	7c66 667c 6666 7c00 3c66 6060 6066 3c00
	786c 6666 666c 7800 7e60 607c 6060 7e00
	7e60 607c 6060 6000 3e60 606e 6666 3e00
	6666 667e 6666 6600 7830 3030 3030 7800
	0606 0606 0666 3c00 666c 7870 786c 6600
	6060 6060 6060 7e00 c6ee fed6 c6c6 c600
	6676 7e7e 6e66 6600 3c66 6666 6666 3c00
	7c66 667c 6060 6000 3c66 6666 766c 3600
	7c66 667c 6c66 6600 3c66 603c 0666 3c00
	7e18 1818 1818 1800 6666 6666 6666 3e00
	6666 6666 663c 1800 c6c6 c6d6 feee c600
	6666 3c18 3c66 6600 6666 663c 1818 1800
	7e06 0c18 3060 7e00 7860 6060 6060 7800

@costab
	fe fd fd fd fd fd fc fc fb fa fa f9 f8 f7 f6 f5
	f4 f3 f1 f0 ef ed eb ea e8 e6 e5 e3 e1 df dd da
	d8 d6 d4 d1 cf cd ca c8 c5 c2 c0 bd ba b8 b5 b2
	af ac a9 a6 a3 a0 9d 9a 97 94 91 8e 8b 88 85 82
	7f 7b 78 75 72 6f 6c 69 66 63 60 5d 5a 57 54 51
	4e 4b 48 45 43 40 3d 3b 38 35 33 30 2e 2c 29 27
	25 23 20 1e 1c 1a 18 17 15 13 12 10 0e 0d 0c 0a
	09 08 07 06 05 04 03 03 02 01 01 00 00 00 00 00
	00 00 00 00 00 00 01 01 02 03 03 04 05 06 07 08
	09 0a 0c 0d 0e 10 12 13 15 17 18 1a 1c 1e 20 23
	25 27 29 2c 2e 30 33 35 38 3b 3d 40 43 45 48 4b
	4e 51 54 57 5a 5d 60 63 66 69 6c 6f 72 75 78 7b
	7e 82 85 88 8b 8e 91 94 97 9a 9d a0 a3 a6 a9 ac
	af b2 b5 b8 ba bd c0 c2 c5 c8 ca cd cf d1 d4 d6
	d8 da dd df e1 e3 e5 e6 e8 ea eb ed ef f0 f1 f3
	f4 f5 f6 f7 f8 f9 fa fa fb fc fc fd fd fd fd fd

@sfx
	&hold 0283
		7c 7f 7f 83 87 7e 82 7d 79 7d 7b 79 80 81 84
		92 84 85 7c 72 76 76 80 84 84 82 87 88 83 80
		82 7f 7f 81 81 80 86 7e 70 7f 7e 8b a8 7c 82
		6d 59 6b 87 83 93 85 64 79 7a 86 86 8c 7d 89
		94 8c 79 7f 80 8a 9d 86 89 67 60 72 76 86 8b
		87 89 97 86 6b 82 82 98 99 78 7c 67 63 8d 75
		75 66 55 85 bf a6 89 7c 76 82 76 90 7c 5f 7a
		9c 8d 7e 7f 75 7f 8e 9a 85 72 6a 72 92 90 69
		65 7e 75 94 a2 72 5f 67 90 ab 77 5d 79 61 94
		9f 87 70 98 90 71 70 76 6d 76 86 98 9d 80 62
		73 8c 9d 72 66 93 a2 72 77 86 60 6f 84 7a a1
		7a 6e 98 8d b0 7e 50 54 92 77 59 78 a6 90 84
		aa 9b 67 77 84 82 8a 95 7c 71 54 5a 78 76 9b
		9d 95 93 85 73 75 73 7e 7d 64 8e 90 91 8b 60
		71 7e 6e 80 8f 62 60 78 94 86 9b aa 98 69 5c
		88 a3 91 82 77 7f 80 7c 91 86 6d 6f 80 8d 7e
		81 7f 6d 81 7a 96 8e 93 8d 43 63 97 a4 75 75
		9b 7d 6c 71 99 83 6d 82 79 74 95 a1 88 78 5e
		60 6b 81 9b 86 67 8a 93 7b 6b 73 89 83 7d 98
		6a 65 87 88 83 7c 83 97 72 50 84 b0 93 79 6c
		88 8b 6b 79 95 9a 8f 83 6e 82 7d 7a 7e 7d 75
		94 86 85 8d 87 6f 7b 91 9a 88 75 77 97 7c 6e
		78 92 81 7d 91 87 83 94 77 65 71 84 84 7d 81
		8f 80 6c 84 98 80 7e 7f 77 80 8a 76 77 7a 7b
		7e 7c 7f 84 86 86 86 83 7f 7d 85 79 7a 82 87
		7f 7c 82 76 72 85 80 8d 81 78 8a 80 74 7a 86
		8c 82 85 8a 84 79 83 8a 7e 7f 84 7b 7a 76 7c
		84 80 7e 82 7b 80 76 7c 7e 74 7d 81 76 80 7c
		7b 7e 7b 7d 7f 7c 7c 7a 7c 79 7d 82 8a 82 82
		80 7c 7c 84 80 7d 7d 81 7e 82 84 84 80 7e 7c
		80 7f 7d 7e 81 84 81 7b 7e 7f 7c 7d 7a 7e 82
		7f 7d 80 84 80 7e 82 81 80 82 83 81 81 81 80
		81 81 7d 7b 7e 80 82 80 7d 7e 81 85 83 81 7e
		7f 7e 7e 7d 7d 7f 7f 7f 7e 7e 80 7e 7e 80 7f
		7e 81 82 81 81 7f 81 82 82 82 80 7f 81 7e 81
		82 83 82 80 81 81 81 82 82 81 81 82 81 82 81
		81 7f 7f 80 80 80 80 7f 7f 80 81 82 82 82 83
		82 81 82 82 80 80 83 81 82 83 83 82 83 83 82
		80 82 82 81 83 83 83 82 82 82 81 81 81 80 81
		82 82 82 83 83 82 82 81 81 83 82 80 81 81 80
		80 81 80 80 82 82 81 82 83 83 81 82 82 7f 7f
		80 80 80 80 80 80 82 82 80 81 81 81 80 81 80
		7f 80 7f 80 81 81 80 80 80 7f 7f 80 7f
	&rot 022f
		7d 7b 81 85 83 7f 80 81 81 7d 7e 7d 7f 80 80
		82 81 83 80 81 80 81 81 81 80 80 82 82 80 78
		79 84 8b 85 7e 7f 81 80 76 75 7a 81 83 83 84
		84 86 7e 81 7d 7f 83 82 81 7f 83 83 85 7c 77
		82 89 84 7c 7b 7e 7f 79 7b 79 7c 7f 81 84 81
		83 7f 82 83 85 7b 74 7a 81 85 80 7f 7e 81 80
		80 7e 7f 7e 82 80 81 7f 7f 80 7e 7f 7f 7d 7f
		7f 83 86 83 77 6f 77 84 88 82 80 82 87 82 7e
		7c 88 8b 84 7e 81 84 86 7e 76 88 8e 7f 8d 6f
		7a 92 91 7d 7a 5f 71 86 86 8e 8a 8e 87 7f 86
		7e 7b 83 8c 8c 7c 75 70 80 8f 89 69 74 73 87
		a9 94 78 87 62 63 84 79 8c a5 93 7d 74 62 68
		7a 82 92 96 81 80 6a 6a 80 88 6b 8f 71 75 9f
		8e 83 8f 63 70 79 84 94 98 8f 7c 6e 77 73 73
		7d 79 7a 8c 76 74 8f 84 83 7a 73 77 80 88 88
		80 85 7d 80 8a 7f 75 75 7c 89 89 85 80 82 8c
		82 7d 7a 74 7d 8c 83 7d 76 75 7a 7a 75 88 81
		83 84 60 74 8b 84 87 94 78 89 8c 87 89 8c 79
		81 88 80 86 8c 8b 7b 78 7c 65 8b 91 70 90 7a
		67 9f 91 84 84 64 69 83 85 95 82 86 89 75 8a
		82 75 87 7d 7c 82 7d 83 86 97 82 75 81 7d 76
		a0 83 76 71 65 60 8c 78 92 86 85 74 6c 73 78
		83 94 81 7a 7f 7d 82 8d 80 6e 83 7a 81 81 88
		85 81 74 74 72 7b 80 8c 81 81 83 80 79 7f 82
		86 7f 81 81 7c 7d 8b 7e 7d 7e 7d 80 8a 8b 88
		82 7e 7d 7d 81 77 7d 88 7c 8c 88 6e 7f 85 82
		8f 84 77 78 73 76 7c 81 88 83 82 7a 7c 7d 7b
		7f 87 84 83 80 85 83 85 7e 81 81 80 7d 7f 7b
		80 7f 7b 7a 83 7e 7f 7d 7e 80 7e 80 85 81 7f
		7b 84 86 7c 7d 7e 7a 84 89 87 87 85 82 7f 80
		86 82 85 88 86 82 80 80 83 81 83 82 85 7c 7b
		7c 7c 7b 7d 7f 7f 80 82 81 84 84 83 82 83 82
		83 82 83 82 81 7d 7f 80 82 80 81 81 82 80 7f
		7e 7f 7f 7e 7e 80 7e 7f 7e 81 7f 80 80 7f 7f
		7e 7f 81 81 7f 7f 82 83 83 83 83 84 84 82 80
		80 80 7e 7d 7d 7e 7d 7c 7f 82 82 81 81 82 80
		81 81 80 80 80 81 80 7f 81 81 80 81 81 81 81
		81 80 80 7f
	&x 031c
		84 8b 84 83 81 81 7c 95 7d 7c 7d 70 7a 8d 87
		82 84 7d 6d 7c 73 78 77 7f 7c 87 7a 78 79 89
		80 7d 77 80 77 7d 7c 7f 77 81 77 7f 81 81 86
		89 79 81 81 82 81 83 83 7e 76 79 81 81 73 80
		7b 82 80 7a 76 81 7c 7d 79 80 82 84 7a 80 7c
		80 7f 81 7e 86 84 85 82 86 7f 82 84 86 7d 83
		81 81 81 83 7e 82 7a 81 82 80 7c 83 7f 7f 7c
		7d 7c 80 80 82 80 7f 7f 85 83 82 80 87 85 85
		85 85 81 83 82 82 82 85 84 85 80 7f 81 84 80
		81 80 83 82 85 82 7e 7e 83 81 81 81 82 7e 82
		82 81 7f 84 85 86 86 87 81 83 86 84 80 82 81
		83 82 81 80 83 81 80 7f 80 83 83 80 82 81 80
		7f 7f 80 82 82 80 82 82 80 80 81 83 85 86 82
		81 84 85 82 81 81 81 81 80 7e 80 81 7f 7c 7f
		80 81 7f 7f 7f 7f 7e 7e 7e 7f 80 7f 7e 7f 7f
		7f 7f 80 7f 84 84 83 82 83 81 81 7f 7f 7e 80
		80 80 7f 7e 7c 7e 7d 7e 7e 7d 7f 7e 7d 7d 7c
		7d 7e 7e 7d 7f 7d 7d 7e 7f 7d 7f 80 82 82 82
		80 80 80 7f 7f 7f 80 81 80 7e 7d 7d 7f 7f 7d
		7c 7e 7f 7e 7d 7d 7d 7d 7f 7d 7d 7f 7e 7d 7f
		7d 7d 7f 82 82 83 82 7f 7e 81 81 7f 7e 80 80
		80 7e 7d 7e 80 7e 7f 7e 7e 81 80 7f 7f 7e 7d
		7e 7f 7f 7f 7d 7f 7e 7d 7e 7f 81 82 83 82 80
		81 82 82 80 7f 80 82 82 80 80 81 81 7f 7f 80
		81 80 80 80 80 7f 80 7e 7f 81 80 7f 7f 7f 80
		7f 80 80 83 84 82 81 83 82 82 80 80 81 82 81
		81 80 81 7f 80 7f 7f 81 80 80 81 80 80 7f 7f
		80 81 7e 7f 80 7f 80 81 7f 7f 83 83 83 84 81
		81 80 81 80 81 81 82 82 82 7f 80 80 81 7e 7f
		80 82 81 81 7e 7e 80 81 81 7f 80 81 7f 7f 81
		80 7d 84 83 82 83 82 80 7f 80 83 81 82 81 82
		81 80 81 81 7f 82 7f 80 82 81 7e 7e 7e 82 83
		7e 7f 81 7d 82 80 7e 7e 80 7f 81 82 83 83 81
		81 80 81 7f 7f 82 7f 81 84 81 80 80 7c 80 7e
		82 7e 7f 7f 84 7b 7d 7e 80 82 85 7d 7f 7c 7f
		7e 83 80 84 82 82 7c 83 7f 82 81 81 80 83 7e
		80 7f 7f 80 81 7d 81 80 7f 79 82 7f 85 7d 82
		85 7c 79 83 7f 80 80 7f 7f 80 7f 80 80 83 7e
		81 82 7f 81 85 7e 84 7d 7f 7e 7d 7f 81 81 7f
		7f 80 81 7f 7d 80 7e 82 80 82 7f 80 81 7e 77
		83 85 82 81 80 80 80 7e 83 7f 7c 80 7f 81 84
		7f 82 7e 80 7f 7c 82 82 7c 84 83 7f 7e 81 7f
		80 7f 80 7e 7c 7d 82 81 7f 84 82 7e 82 84 82
		7f 82 80 7b 80 7f 7c 7b 82 85 7e 81 7f 80 7f
		7f 7c 81 7e 80 7f 7e 7d 7f 7f 80 7c 83 7e 81
		82 7d 82 81 83 7d 7f 81 7f 81 82 85 81 7e 7e
		81 80 7e 7c 80 83 80 82 81 7d 82 7e 7f 7d 81
		81 7f 7e 7f 7d 7e 80 80 81 82 81 84 83 7e 81
		82 7c 7e 81 85 82 7d 82 82 7e 80 7e 81 80 7e
		7f 80 7e 81 80 82 7f 82 83 7e 7f 82 80 7f 7d
		80 81 80 82 82 81 81 80 81 80 7f 82 84 80 7f
		81 83 81 7f 80 81 80 81 80 7f 7e 7f 7f 7f 80
		81 80 80 7f 81 7f 80 7f 81 81 81 81 80 80 81
		7f
	&freeze 0661
		84 86 76 60 87 d8 af 09 17 de ec 4c 3f a2 ad
		73 84 b1 7d 58 85 95 8a 8f 70 5e 88 8f 7e 88
		81 66 6c 7a 69 73 89 7c 76 7b 8c 90 7c 87 71
		63 83 7a 84 9e 7f 70 87 81 76 9e a8 84 8e 9e
		82 7c 94 81 62 74 80 6b 7b 98 90 7f 70 70 74
		68 71 7f 74 73 86 89 73 79 89 6f 63 7c 7e 7a
		8f 93 7c 76 75 6e 69 69 73 83 84 85 95 9c 91
		83 7b 68 5c 67 68 65 76 84 87 83 88 9c 98 83
		83 83 6e 6a 75 6e 60 72 80 72 7b 97 92 87 8c
		8b 80 83 88 80 74 72 73 6f 69 74 86 85 7f 88
		90 8c 8c 86 7b 79 79 74 79 7e 88 8d 88 80 88
		8f 81 77 81 7f 78 85 93 8c 8e 95 8c 7c 7f 88
		83 7d 85 8a 86 8b 94 8f 89 91 92 83 80 8e 8b
		83 85 8a 8b 92 97 96 94 95 91 8d 8d 8d 8e 8e
		87 87 8e 8d 8a 8f 91 8c 8b 91 92 8b 8e 91 8b
		85 8b 90 8c 8b 90 8d 8a 92 93 86 83 89 84 7e
		85 8c 8b 8d 90 8e 89 8b 8a 85 83 84 87 85 88
		88 88 89 88 85 87 87 85 82 80 7e 81 84 84 80
		86 8c 86 81 83 83 7f 7d 7d 7a 7c 82 80 7a 7f
		85 80 7a 7d 7e 7a 79 7b 79 77 7c 7b 76 77 7d
		7c 77 76 77 77 76 74 71 72 73 72 73 75 78 79
		78 72 6f 72 72 6c 6a 70 71 6d 70 73 70 70 72
		6c 69 6f 73 6a 67 6d 6b 6a 6e 70 6d 6c 6e 6b
		67 6a 6b 68 65 69 6b 6b 6c 6d 6c 6a 6a 68 68
		6a 6b 68 67 67 69 6b 6c 69 6a 6c 6a 67 6c 6c
		68 69 69 67 68 6e 6e 6b 6e 6f 6c 6c 6e 6d 69
		69 6b 6c 6d 6f 71 6f 6f 71 70 6e 70 71 6e 6d
		6e 70 72 73 73 73 74 73 74 76 75 72 73 74 74
		77 7b 7a 78 7a 7c 79 78 7a 7a 78 79 7c 7c 7d
		81 81 7d 7f 83 81 80 82 82 81 82 84 82 83 86
		85 84 86 88 89 89 89 88 8b 8a 8a 8b 8d 8d 8d
		8e 8f 8e 8f 91 8f 8f 91 94 91 91 95 95 93 95
		97 96 95 98 96 95 98 9a 98 96 99 9a 99 9b 9e
		9c 9b 9b 9b 9c 9d 9e 9d 9d 9f a0 a0 a1 a1 a0
		a0 9f 9f a1 a3 a2 a1 a3 a3 a3 a5 a4 a3 a3 a5
		a3 a2 a5 a5 a3 a4 a6 a5 a6 a7 a7 a5 a5 a7 a5
		a5 a7 a7 a5 a5 a6 a7 a8 a8 a7 a7 a7 a7 a8 a7
		a8 a8 a7 a6 a7 a8 aa a9 a7 a8 a9 a8 a7 a8 a8
		a6 a6 a7 a7 a9 aa a8 a7 a8 a8 a7 a7 a7 a7 a6
		a6 a7 a5 a7 a7 a6 a4 a5 a6 a5 a5 a5 a4 a3 a3
		a3 a3 a4 a4 a2 a3 a3 a3 a2 a2 a1 a0 a2 a1 a1
		a0 a1 a0 9f 9f 9f 9e 9e 9e 9d 9b 9d 9c 9b 9b
		9b 9a 99 9a 9a 99 99 98 97 95 97 96 96 95 95
		94 93 93 93 92 92 90 8f 8f 90 8e 8e 8e 8d 8d
		8d 8b 8b 8b 89 88 87 87 88 87 85 85 85 84 85
		83 83 83 81 80 80 81 80 7e 7e 7e 7d 7d 7d 7b
		7a 79 79 78 78 77 76 75 74 74 73 74 73 72 71
		71 70 70 6f 6e 6d 6b 6a 6a 6a 6a 69 68 68 67
		67 66 66 65 63 62 62 61 62 62 5f 5d 5f 5f 5e
		5d 5d 5c 5b 5b 59 58 58 58 57 56 55 55 54 55
		54 54 53 52 51 52 51 4f 4e 4f 4e 4d 4c 4c 4a
		4a 4b 4a 49 4a 4a 48 47 47 47 45 45 45 43 43
		44 44 44 43 42 41 41 41 41 40 3e 3e 3d 3d 3c
		3c 3b 3b 3b 3a 3a 3b 3a 3a 39 39 38 38 38 39
		39 39 38 39 38 37 36 36 36 34 35 35 36 35 34
		34 33 33 33 32 32 32 32 32 33 33 31 31 31 31
		30 2f 30 31 30 31 30 30 31 31 30 31 2f 2f 2e
		2f 2f 2e 2f 2e 2f 30 30 30 31 31 30 30 30 2f
		2f 2e 2e 2e 2d 2e 2e 2f 30 30 31 30 2f 31 30
		30 30 2f 2f 30 30 2f 30 30 31 31 31 30 32 32
		32 33 32 32 34 33 34 34 33 33 34 34 34 34 34
		35 35 36 36 36 37 36 36 36 37 36 36 38 38 37
		38 38 38 39 3b 3a 3a 3a 3a 3a 3a 3a 3b 3b 3b
		3c 3c 3e 3d 3d 3e 3e 3e 3e 3f 3f 40 40 40 41
		42 43 43 43 43 43 43 43 44 44 44 45 45 45 46
		46 47 47 48 48 49 48 49 48 48 4a 4b 49 4b 4c
		4b 4b 4c 4c 4d 4d 4d 4d 4e 4f 4f 50 50 50 52
		50 51 52 53 53 53 53 53 54 54 55 56 55 56 56
		57 58 58 58 59 59 59 59 5a 5a 5b 5b 5b 5c 5c
		5d 5d 5d 5e 5f 5e 60 5f 60 60 60 61 61 61 61
		62 62 63 63 64 65 64 64 65 66 65 66 66 66 67
		67 67 68 68 68 68 69 6b 6b 6a 6b 6b 6b 6b 6c
		6c 6c 6b 6d 6d 6e 6e 6f 6e 70 70 70 71 70 71
		70 71 70 73 73 72 73 73 73 73 74 74 75 75 75
		75 76 76 76 77 76 76 76 76 78 78 78 78 78 79
		79 79 79 7a 79 7a 7a 7b 7a 7b 7b 7a 7b 7a 7c
		7c 7c 7c 7c 7d 7c 7d 7d 7e 7e 7e 7e 7f 7f 7e
		7f 7f 7e 7f 80 80 80 80 80 80 80 80 80 81 80
		81 80 81 82 81 81 82 82 82 83 82 83 83 82 82
		83 83 83 83 84 84 84 84 84 84 84 83 84 84 84
		84 85 85 85 84 86 85 85 85 85 85 85 84 86 85
		85 86 87 86 86 86 87 86 87 87 87 86 86 87 86
		87 87 87 86 87 87 87 86 88 88 87 88 87 86 87
		87 88 88 88 87 88 88 88 88 89 88 88 87 88 88
		88 89 88 88 87 88 88 88 88 88 88 88 88 88 88
		89 89 88 88 88 89 88 88 89 88 89 88 89 89 89
		89 88 89 89 88 88 88 87 88 89 89 89 88 89 89
		88 88 88 89 88 87 88 88 88 89 89 89 88 89 88
		89 88 89 89 89 87 89 88 88 89 89 88 88 88 88
		89 88 88 87 88 88 88 88 88 88 88 87 88 88 88
		88 88 88 87 87 89 87 87 87 88 88 88 88 88 88
		87 87 87 87 88 88 88 87 87 87 87 87 88 87 87
		87 87 87 87 87 87 86 87 87 87 87 88 87 87 87
		86 86 87 86 86 86 87 86 86 86 86 86 87 86 86
		87 86 86 86 86 86 86 86 86 86 85 86 86 85 86
		86 86 86 86 85 85 85 85 85 86 85 86 85 85 85
		85 85 84 85 84 85 84 84 85 85 84 84 85 84 85
		84 85 84 84 84 84 84 85 84 84 83 84 84 85 84
		85 84 83 83 84 84 84 82 83 84 84 84 84 83 82
		82 85 86 84 83 83 84 84 84 84 83 82 82 83 85
		83 83 83 84 83 83 83 83 82 82 81 83 83 84 84
		83 82 82 82 83 84 84 82 82 82 81 80 80 80 80
		81 82 82 83 84 83 83 82 80 81 81 82 82 83 82
		82 82 83 81 82 80 81 81 81 83 83 81 81 80 80
		80 80 81 82 83 83 83 81 82 80 80 7e 7e 7f 80
		81 82 82 83 83 83 82 81 81 7f 7f 7e 80 7f 80
		80 80 81 81 82 82 82 82 80 80 80 80 7f 80 80
		80 7f 80 80 80 82 81 82 81 80 81 80 80 7f 7f
		7f 7f 7f 80 80 80 80 80 7f 80 80 80 7f
